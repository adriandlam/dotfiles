// src/index.ts
import { mkdir, readFile, writeFile } from "fs/promises";
import path from "path";
import XDGAppPaths from "xdg-app-paths";
var CredentialsStore = class {
  loadedCredentials;
  authFilePath;
  /**
   * @param authFilePathOverride - Override for the path to the auth file. Can also be set via the PRISMA_PLATFORM_AUTH_FILE environment variable. Useful for testing.
   */
  constructor(authFilePathOverride) {
    this.authFilePath = process.env.PRISMA_PLATFORM_AUTH_FILE || authFilePathOverride || path.join(XDGAppPaths({ name: "prisma-platform" }).config(), "auth.json");
  }
  async reloadCredentialsFromDisk() {
    try {
      const content = await readFile(this.authFilePath, "utf-8");
      const data = JSON.parse(content);
      this.loadedCredentials = data.tokens || [];
    } catch (error) {
      this.loadedCredentials = [];
    }
  }
  async storeCredentials(credentials) {
    await this.reloadCredentialsFromDisk();
    const updatedCredentials = [
      ...(this.loadedCredentials || []).filter((c) => c.workspaceId !== credentials.workspaceId),
      credentials
    ];
    this.loadedCredentials = updatedCredentials;
    await this.writeCredentialsToDisk(updatedCredentials);
  }
  async deleteCredentials(workspaceId) {
    await this.reloadCredentialsFromDisk();
    const updatedCredentials = (this.loadedCredentials || []).filter((c) => c.workspaceId !== workspaceId);
    this.loadedCredentials = updatedCredentials;
    await this.writeCredentialsToDisk(updatedCredentials);
  }
  async getCredentials() {
    if (this.loadedCredentials === void 0) {
      await this.reloadCredentialsFromDisk();
    }
    return this.loadedCredentials || [];
  }
  async getCredentialsForWorkspace(workspaceId) {
    return (await this.getCredentials()).filter((c) => c.workspaceId === workspaceId)[0];
  }
  async writeCredentialsToDisk(credentials) {
    const data = { tokens: credentials };
    await mkdir(path.dirname(this.authFilePath), { recursive: true });
    await writeFile(this.authFilePath, JSON.stringify(data, null, 2));
  }
};
export {
  CredentialsStore
};
