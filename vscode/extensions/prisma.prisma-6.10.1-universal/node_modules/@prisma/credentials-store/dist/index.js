"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  CredentialsStore: () => CredentialsStore
});
module.exports = __toCommonJS(index_exports);
var import_promises = require("fs/promises");
var import_path = __toESM(require("path"));
var import_xdg_app_paths = __toESM(require("xdg-app-paths"));
var CredentialsStore = class {
  loadedCredentials;
  authFilePath;
  /**
   * @param authFilePathOverride - Override for the path to the auth file. Can also be set via the PRISMA_PLATFORM_AUTH_FILE environment variable. Useful for testing.
   */
  constructor(authFilePathOverride) {
    this.authFilePath = process.env.PRISMA_PLATFORM_AUTH_FILE || authFilePathOverride || import_path.default.join((0, import_xdg_app_paths.default)({ name: "prisma-platform" }).config(), "auth.json");
  }
  async reloadCredentialsFromDisk() {
    try {
      const content = await (0, import_promises.readFile)(this.authFilePath, "utf-8");
      const data = JSON.parse(content);
      this.loadedCredentials = data.tokens || [];
    } catch (error) {
      this.loadedCredentials = [];
    }
  }
  async storeCredentials(credentials) {
    await this.reloadCredentialsFromDisk();
    const updatedCredentials = [
      ...(this.loadedCredentials || []).filter((c) => c.workspaceId !== credentials.workspaceId),
      credentials
    ];
    this.loadedCredentials = updatedCredentials;
    await this.writeCredentialsToDisk(updatedCredentials);
  }
  async deleteCredentials(workspaceId) {
    await this.reloadCredentialsFromDisk();
    const updatedCredentials = (this.loadedCredentials || []).filter((c) => c.workspaceId !== workspaceId);
    this.loadedCredentials = updatedCredentials;
    await this.writeCredentialsToDisk(updatedCredentials);
  }
  async getCredentials() {
    if (this.loadedCredentials === void 0) {
      await this.reloadCredentialsFromDisk();
    }
    return this.loadedCredentials || [];
  }
  async getCredentialsForWorkspace(workspaceId) {
    return (await this.getCredentials()).filter((c) => c.workspaceId === workspaceId)[0];
  }
  async writeCredentialsToDisk(credentials) {
    const data = { tokens: credentials };
    await (0, import_promises.mkdir)(import_path.default.dirname(this.authFilePath), { recursive: true });
    await (0, import_promises.writeFile)(this.authFilePath, JSON.stringify(data, null, 2));
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CredentialsStore
});
