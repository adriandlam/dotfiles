import * as ___react___ from 'react';
import * as ___react_dom___ from 'react-dom'; 

function require(mod) {
  if (mod === 'react') return ___react___;
  if (mod === 'react-dom') return ___react_dom___;
  throw new Error(`Unknown module ${mod}`);
}
import{e as n}from"./chunk-P5LRZ6C2.js";n();n();n();n();n();function J(r){return typeof r>"u"||r===void 0}function g(r){return typeof r=="string"}function Fe(r){return typeof r=="number"}function Ir(r){return typeof r=="boolean"}function Br(r){return r===null}function mi(r){return r instanceof Date}function Dr(r){return typeof r=="bigint"}function W(r){return typeof r=="function"}function R(r){return typeof r=="object"&&r!==null}function o(r){return Object.freeze(r)}function wr(r){return Q(r)?r:[r]}function Q(r){return Array.isArray(r)}function F(r){return r}var l=o({is(r){return r.kind==="AlterTableNode"},create(r){return o({kind:"AlterTableNode",table:r})},cloneWithTableProps(r,e){return o({...r,...e})},cloneWithColumnAlteration(r,e){return o({...r,columnAlterations:r.columnAlterations?[...r.columnAlterations,e]:[e]})}});n();n();var c=o({is(r){return r.kind==="IdentifierNode"},create(r){return o({kind:"IdentifierNode",name:r})}});var X=o({is(r){return r.kind==="CreateIndexNode"},create(r){return o({kind:"CreateIndexNode",name:c.create(r)})},cloneWith(r,e){return o({...r,...e})},cloneWithColumns(r,e){return o({...r,columns:[...r.columns||[],...e]})}});n();var Qr=o({is(r){return r.kind==="CreateSchemaNode"},create(r,e){return o({kind:"CreateSchemaNode",schema:c.create(r),...e})},cloneWith(r,e){return o({...r,...e})}});n();var vo=["preserve rows","delete rows","drop"],z=o({is(r){return r.kind==="CreateTableNode"},create(r){return o({kind:"CreateTableNode",table:r,columns:o([])})},cloneWithColumn(r,e){return o({...r,columns:o([...r.columns,e])})},cloneWithConstraint(r,e){return o({...r,constraints:r.constraints?o([...r.constraints,e]):o([e])})},cloneWithFrontModifier(r,e){return o({...r,frontModifiers:r.frontModifiers?o([...r.frontModifiers,e]):o([e])})},cloneWithEndModifier(r,e){return o({...r,endModifiers:r.endModifiers?o([...r.endModifiers,e]):o([e])})},cloneWith(r,e){return o({...r,...e})}});n();n();var P=o({is(r){return r.kind==="SchemableIdentifierNode"},create(r){return o({kind:"SchemableIdentifierNode",identifier:c.create(r)})},createWithSchema(r,e){return o({kind:"SchemableIdentifierNode",schema:c.create(r),identifier:c.create(e)})}});var ge=o({is(r){return r.kind==="DropIndexNode"},create(r,e){return o({kind:"DropIndexNode",name:P.create(r),...e})},cloneWith(r,e){return o({...r,...e})}});n();var xr=o({is(r){return r.kind==="DropSchemaNode"},create(r,e){return o({kind:"DropSchemaNode",schema:c.create(r),...e})},cloneWith(r,e){return o({...r,...e})}});n();var Or=o({is(r){return r.kind==="DropTableNode"},create(r,e){return o({kind:"DropTableNode",table:r,...e})},cloneWith(r,e){return o({...r,...e})}});n();n();var v=o({is(r){return r.kind==="AliasNode"},create(r,e){return o({kind:"AliasNode",node:r,alias:e})}});n();var $=o({is(r){return r.kind==="TableNode"},create(r){return o({kind:"TableNode",table:P.create(r)})},createWithSchema(r,e){return o({kind:"TableNode",table:P.createWithSchema(r,e)})}});n();n();n();function C(r){return R(r)&&W(r.toOperationNode)}function Pr(r){return R(r)&&"expressionType"in r&&C(r)}function Lo(r){return R(r)&&"expression"in r&&g(r.alias)&&C(r)}n();n();n();var ae=o({is(r){return r.kind==="SelectModifierNode"},create(r,e){return o({kind:"SelectModifierNode",modifier:r,of:e})},createWithExpression(r){return o({kind:"SelectModifierNode",rawModifier:r})}});n();n();n();n();var V=o({is(r){return r.kind==="AndNode"},create(r,e){return o({kind:"AndNode",left:r,right:e})}});n();var Z=o({is(r){return r.kind==="OrNode"},create(r,e){return o({kind:"OrNode",left:r,right:e})}});var vr=o({is(r){return r.kind==="OnNode"},create(r){return o({kind:"OnNode",on:r})},cloneWithOperation(r,e,t){return o({...r,on:e==="And"?V.create(r.on,t):Z.create(r.on,t)})}});var le=o({is(r){return r.kind==="JoinNode"},create(r,e){return o({kind:"JoinNode",joinType:r,table:e,on:void 0})},createWithOn(r,e,t){return o({kind:"JoinNode",joinType:r,table:e,on:vr.create(t)})},cloneWithOn(r,e){return o({...r,on:r.on?vr.cloneWithOperation(r.on,"And",e):vr.create(e)})}});n();n();var Ce=o({is(r){return r.kind==="BinaryOperationNode"},create(r,e,t){return o({kind:"BinaryOperationNode",leftOperand:r,operator:e,rightOperand:t})}});n();var In=["=","==","!=","<>",">",">=","<","<=","in","not in","is","is not","like","not like","match","ilike","not ilike","@>","<@","^@","&&","?","?&","?|","!<","!>","<=>","!~","~","~*","!~*","@@","@@@","!!","<->","regexp","is distinct from","is not distinct from"],Bn=["+","-","*","/","%","^","&","|","#","<<",">>"],Fo=["->","->>"],Dn=[...In,...Bn,"&&","||"],Qn=["exists","not exists"],Pn=["not","-",...Qn],Mo=[...Dn,...Fo,...Pn,"between","between symmetric"],_=o({is(r){return r.kind==="OperatorNode"},create(r){return o({kind:"OperatorNode",operator:r})}});function Ft(r){return g(r)&&Fo.includes(r)}n();n();var h=o({is(r){return r.kind==="ColumnNode"},create(r){return o({kind:"ColumnNode",column:c.create(r)})}});n();n();var Me=o({is(r){return r.kind==="SelectAllNode"},create(){return o({kind:"SelectAllNode"})}});var ze=o({is(r){return r.kind==="ReferenceNode"},create(r,e){return o({kind:"ReferenceNode",table:e,column:r})},createSelectAll(r){return o({kind:"ReferenceNode",table:r,column:Me.create()})}});n();n();var Lr=class{#e;get dynamicReference(){return this.#e}get refType(){}constructor(e){this.#e=e}toOperationNode(){return Mt(this.#e)}};function Fr(r){return R(r)&&C(r)&&g(r.dynamicReference)}n();var ee=o({is(r){return r.kind==="OrderByItemNode"},create(r,e){return o({kind:"OrderByItemNode",orderBy:r,direction:e})},cloneWith(r,e){return o({...r,...e})}});n();var L=o({is(r){return r.kind==="RawNode"},create(r,e){return o({kind:"RawNode",sqlFragments:o(r),parameters:o(e)})},createWithSql(r){return L.create([r],[])},createWithChild(r){return L.create(["",""],[r])},createWithChildren(r){return L.create(new Array(r.length+1).fill(""),r)}});n();n();var zo={is(r){return r.kind==="CollateNode"},create(r){return o({kind:"CollateNode",collation:c.create(r)})}};var Mr=class r{#e;constructor(e){this.#e=o(e)}desc(){return new r({node:ee.cloneWith(this.#e.node,{direction:L.createWithSql("desc")})})}asc(){return new r({node:ee.cloneWith(this.#e.node,{direction:L.createWithSql("asc")})})}nullsLast(){return new r({node:ee.cloneWith(this.#e.node,{nulls:"last"})})}nullsFirst(){return new r({node:ee.cloneWith(this.#e.node,{nulls:"first"})})}collate(e){return new r({node:ee.cloneWith(this.#e.node,{collation:zo.create(e)})})}toOperationNode(){return this.#e.node}};n();var Vo=new Set;function Ve(r){Vo.has(r)||(Vo.add(r),console.log(r))}function Vt(r){return r==="asc"||r==="desc"}function K(r){if(r.length===2)return[zt(r[0],r[1])];if(r.length===1){let[e]=r;return Array.isArray(e)?(Ve("orderBy(array) is deprecated, use multiple orderBy calls instead."),e.map(t=>zt(t))):[zt(e)]}throw new Error(`Invalid number of arguments at order by! expected 1-2, received ${r.length}`)}function zt(r,e){let t=vn(r);if(ee.is(t)){if(e)throw new Error("Cannot specify direction twice!");return t}return Uo(t,e)}function vn(r){if(pe(r))return U(r);if(Fr(r))return r.toOperationNode();let[e,t]=r.split(" ");return t?(Ve("`orderBy('column asc')` is deprecated. Use `orderBy('column', 'asc')` instead."),Uo(re(e),t)):re(r)}function Uo(r,e){if(typeof e=="string"){if(!Vt(e))throw new Error(`Invalid order by direction: ${e}`);return ee.create(r,L.createWithSql(e))}if(Pr(e))return Ve("`orderBy(..., expr)` is deprecated. Use `orderBy(..., 'asc')` or `orderBy(..., (ob) => ...)` instead."),ee.create(r,e.toOperationNode());let t=ee.create(r);return e?e(new Mr({node:t})).toOperationNode():t}n();var Ue=o({is(r){return r.kind==="JSONReferenceNode"},create(r,e){return o({kind:"JSONReferenceNode",reference:r,traversal:e})},cloneWithTraversal(r,e){return o({...r,traversal:e})}});n();var zr=o({is(r){return r.kind==="JSONOperatorChainNode"},create(r){return o({kind:"JSONOperatorChainNode",operator:r,values:o([])})},cloneWithValue(r,e){return o({...r,values:o([...r.values,e])})}});n();var be=o({is(r){return r.kind==="JSONPathNode"},create(r){return o({kind:"JSONPathNode",inOperator:r,pathLegs:o([])})},cloneWithLeg(r,e){return o({...r,pathLegs:o([...r.pathLegs,e])})}});function Mt(r){return g(r)?re(r):r.toOperationNode()}function fe(r){return Q(r)?r.map(e=>q(e)):[q(r)]}function q(r){return pe(r)?U(r):Mt(r)}function Jo(r,e){let t=re(r);if(Ft(e))return Ue.create(t,zr.create(_.create(e)));let i=e.slice(0,-1);if(Ft(i))return Ue.create(t,be.create(_.create(i)));throw new Error(`Invalid JSON operator: ${e}`)}function re(r){let e=".";if(!r.includes(e))return ze.create(h.create(r));let t=r.split(e).map(Jt);if(t.length===3)return Ln(t);if(t.length===2)return Fn(t);throw new Error(`invalid column reference ${r}`)}function $o(r){let e=" as ";if(r.includes(e)){let[t,i]=r.split(e).map(Jt);return v.create(re(t),c.create(i))}else return re(r)}function Ut(r){return h.create(r)}function Je(r){let e=" ";if(r.includes(e)){let[t,i]=r.split(e).map(Jt);if(!Vt(i))throw new Error(`invalid order direction "${i}" next to "${t}"`);return K([t,i])[0]}else return Ut(r)}function Ln(r){let[e,t,i]=r;return ze.create(h.create(i),$.createWithSchema(e,t))}function Fn(r){let[e,t]=r;return ze.create(h.create(t),$.create(e))}function Jt(r){return r.trim()}n();n();var Vr=o({is(r){return r.kind==="PrimitiveValueListNode"},create(r){return o({kind:"PrimitiveValueListNode",values:o([...r])})}});n();var ue=o({is(r){return r.kind==="ValueListNode"},create(r){return o({kind:"ValueListNode",values:o(r)})}});n();var k=o({is(r){return r.kind==="ValueNode"},create(r){return o({kind:"ValueNode",value:r})},createImmediate(r){return o({kind:"ValueNode",value:r,immediate:!0})}});function Ko(r){return Q(r)?Mn(r):x(r)}function x(r){return pe(r)?U(r):k.create(r)}function Ur(r){return Fe(r)||Ir(r)||Br(r)}function Wr(r){if(!Ur(r))throw new Error(`unsafe immediate value ${JSON.stringify(r)}`);return k.createImmediate(r)}function Mn(r){return r.some(pe)?ue.create(r.map(e=>x(e))):Vr.create(r)}n();var ke=o({is(r){return r.kind==="ParensNode"},create(r){return o({kind:"ParensNode",node:r})}});function y(r){if(r.length===3)return Jr(r[0],r[1],r[2]);if(r.length===1)return x(r[0]);throw new Error(`invalid arguments: ${JSON.stringify(r)}`)}function Jr(r,e,t){return zn(e)&&jo(t)?Ce.create(q(r),$t(e),k.createImmediate(t)):Ce.create(q(r),$t(e),Ko(t))}function S(r,e,t){return Ce.create(q(r),$t(e),q(t))}function Kt(r,e){return $e(Object.entries(r).filter(([,t])=>!J(t)).map(([t,i])=>Jr(t,jo(i)?"is":"=",i)),e)}function $e(r,e,t=!0){let i=e==="and"?V.create:Z.create;if(r.length===0)return Ce.create(k.createImmediate(1),_.create("="),k.createImmediate(e==="and"?1:0));let a=Go(r[0]);for(let d=1;d<r.length;++d)a=i(a,Go(r[d]));return r.length>1&&t?ke.create(a):a}function zn(r){return r==="is"||r==="is not"}function jo(r){return Br(r)||Ir(r)}function $t(r){if(g(r)&&Mo.includes(r))return _.create(r);if(C(r))return r.toOperationNode();throw new Error(`invalid operator ${JSON.stringify(r)}`)}function Go(r){return C(r)?r.toOperationNode():r}n();n();n();var Ne=o({is(r){return r.kind==="OrderByNode"},create(r){return o({kind:"OrderByNode",items:o([...r])})},cloneWithItems(r,e){return o({...r,items:o([...r.items,...e])})}});n();var Gt=o({is(r){return r.kind==="PartitionByNode"},create(r){return o({kind:"PartitionByNode",items:o(r)})},cloneWithItems(r,e){return o({...r,items:o([...r.items,...e])})}});var gr=o({is(r){return r.kind==="OverNode"},create(){return o({kind:"OverNode"})},cloneWithOrderByItems(r,e){return o({...r,orderBy:r.orderBy?Ne.cloneWithItems(r.orderBy,e):Ne.create(e)})},cloneWithPartitionByItems(r,e){return o({...r,partitionBy:r.partitionBy?Gt.cloneWithItems(r.partitionBy,e):Gt.create(e)})}});n();n();var qe=o({is(r){return r.kind==="FromNode"},create(r){return o({kind:"FromNode",froms:o(r)})},cloneWithFroms(r,e){return o({...r,froms:o([...r.froms,...e])})}});n();var jt=o({is(r){return r.kind==="GroupByNode"},create(r){return o({kind:"GroupByNode",items:o(r)})},cloneWithItems(r,e){return o({...r,items:o([...r.items,...e])})}});n();var Ht=o({is(r){return r.kind==="HavingNode"},create(r){return o({kind:"HavingNode",having:r})},cloneWithOperation(r,e,t){return o({...r,having:e==="And"?V.create(r.having,t):Z.create(r.having,t)})}});n();n();var b=o({is(r){return r.kind==="InsertQueryNode"},create(r,e,t){return o({kind:"InsertQueryNode",into:r,...e&&{with:e},replace:t})},createWithoutInto(){return o({kind:"InsertQueryNode"})},cloneWith(r,e){return o({...r,...e})}});n();n();var $r=o({is(r){return r.kind==="ListNode"},create(r){return o({kind:"ListNode",items:o(r)})}});var de=o({is(r){return r.kind==="UpdateQueryNode"},create(r,e){return o({kind:"UpdateQueryNode",table:r.length===1?r[0]:$r.create(r),...e&&{with:e}})},createWithoutTable(){return o({kind:"UpdateQueryNode"})},cloneWithFromItems(r,e){return o({...r,from:r.from?qe.cloneWithFroms(r.from,e):qe.create(e)})},cloneWithUpdates(r,e){return o({...r,updates:r.updates?o([...r.updates,...e]):e})},cloneWithLimit(r,e){return o({...r,limit:e})}});n();n();var Yt=o({is(r){return r.kind==="UsingNode"},create(r){return o({kind:"UsingNode",tables:o(r)})},cloneWithTables(r,e){return o({...r,tables:o([...r.tables,...e])})}});var Te=o({is(r){return r.kind==="DeleteQueryNode"},create(r,e){return o({kind:"DeleteQueryNode",from:qe.create(r),...e&&{with:e}})},cloneWithOrderByItems:(r,e)=>u.cloneWithOrderByItems(r,e),cloneWithoutOrderBy:r=>u.cloneWithoutOrderBy(r),cloneWithLimit(r,e){return o({...r,limit:e})},cloneWithoutLimit(r){return o({...r,limit:void 0})},cloneWithUsing(r,e){return o({...r,using:r.using!==void 0?Yt.cloneWithTables(r.using,e):Yt.create(e)})}});n();var I=o({is(r){return r.kind==="WhereNode"},create(r){return o({kind:"WhereNode",where:r})},cloneWithOperation(r,e,t){return o({...r,where:e==="And"?V.create(r.where,t):Z.create(r.where,t)})}});n();var Xt=o({is(r){return r.kind==="ReturningNode"},create(r){return o({kind:"ReturningNode",selections:o(r)})},cloneWithSelections(r,e){return o({...r,selections:r.selections?o([...r.selections,...e]):o(e)})}});n();var Ho=o({is(r){return r.kind==="ExplainNode"},create(r,e){return o({kind:"ExplainNode",format:r,options:e})}});n();n();var ye=o({is(r){return r.kind==="WhenNode"},create(r){return o({kind:"WhenNode",condition:r})},cloneWithResult(r,e){return o({...r,result:e})}});var G=o({is(r){return r.kind==="MergeQueryNode"},create(r,e){return o({kind:"MergeQueryNode",into:r,...e&&{with:e}})},cloneWithUsing(r,e){return o({...r,using:e})},cloneWithWhen(r,e){return o({...r,whens:r.whens?o([...r.whens,e]):o([e])})},cloneWithThen(r,e){return o({...r,whens:r.whens?o([...r.whens.slice(0,-1),ye.cloneWithResult(r.whens[r.whens.length-1],e)]):void 0})}});n();var Zt=o({is(r){return r.kind==="OutputNode"},create(r){return o({kind:"OutputNode",selections:o(r)})},cloneWithSelections(r,e){return o({...r,selections:r.selections?o([...r.selections,...e]):o(e)})}});var u=o({is(r){return N.is(r)||b.is(r)||de.is(r)||Te.is(r)||G.is(r)},cloneWithEndModifier(r,e){return o({...r,endModifiers:r.endModifiers?o([...r.endModifiers,e]):o([e])})},cloneWithWhere(r,e){return o({...r,where:r.where?I.cloneWithOperation(r.where,"And",e):I.create(e)})},cloneWithJoin(r,e){return o({...r,joins:r.joins?o([...r.joins,e]):o([e])})},cloneWithReturning(r,e){return o({...r,returning:r.returning?Xt.cloneWithSelections(r.returning,e):Xt.create(e)})},cloneWithoutReturning(r){return o({...r,returning:void 0})},cloneWithoutWhere(r){return o({...r,where:void 0})},cloneWithExplain(r,e,t){return o({...r,explain:Ho.create(e,t?.toOperationNode())})},cloneWithTop(r,e){return o({...r,top:e})},cloneWithOutput(r,e){return o({...r,output:r.output?Zt.cloneWithSelections(r.output,e):Zt.create(e)})},cloneWithOrderByItems(r,e){return o({...r,orderBy:r.orderBy?Ne.cloneWithItems(r.orderBy,e):Ne.create(e)})},cloneWithoutOrderBy(r){return o({...r,orderBy:void 0})}});var N=o({is(r){return r.kind==="SelectQueryNode"},create(r){return o({kind:"SelectQueryNode",...r&&{with:r}})},createFrom(r,e){return o({kind:"SelectQueryNode",from:qe.create(r),...e&&{with:e}})},cloneWithSelections(r,e){return o({...r,selections:r.selections?o([...r.selections,...e]):o(e)})},cloneWithDistinctOn(r,e){return o({...r,distinctOn:r.distinctOn?o([...r.distinctOn,...e]):o(e)})},cloneWithFrontModifier(r,e){return o({...r,frontModifiers:r.frontModifiers?o([...r.frontModifiers,e]):o([e])})},cloneWithOrderByItems:(r,e)=>u.cloneWithOrderByItems(r,e),cloneWithGroupByItems(r,e){return o({...r,groupBy:r.groupBy?jt.cloneWithItems(r.groupBy,e):jt.create(e)})},cloneWithLimit(r,e){return o({...r,limit:e})},cloneWithOffset(r,e){return o({...r,offset:e})},cloneWithFetch(r,e){return o({...r,fetch:e})},cloneWithHaving(r,e){return o({...r,having:r.having?Ht.cloneWithOperation(r.having,"And",e):Ht.create(e)})},cloneWithSetOperations(r,e){return o({...r,setOperations:r.setOperations?o([...r.setOperations,...e]):o([...e])})},cloneWithoutSelections(r){return o({...r,selections:[]})},cloneWithoutLimit(r){return o({...r,limit:void 0})},cloneWithoutOffset(r){return o({...r,offset:void 0})},cloneWithoutOrderBy:r=>u.cloneWithoutOrderBy(r),cloneWithoutGroupBy(r){return o({...r,groupBy:void 0})}});n();var Kr=class r{#e;constructor(e){this.#e=o(e)}on(...e){return new r({...this.#e,joinNode:le.cloneWithOn(this.#e.joinNode,y(e))})}onRef(e,t,i){return new r({...this.#e,joinNode:le.cloneWithOn(this.#e.joinNode,S(e,t,i))})}onTrue(){return new r({...this.#e,joinNode:le.cloneWithOn(this.#e.joinNode,L.createWithSql("true"))})}$call(e){return e(this)}toOperationNode(){return this.#e.joinNode}};n();n();n();var Yo=o({is(r){return r.kind==="PartitionByItemNode"},create(r){return o({kind:"PartitionByItemNode",partitionBy:r})}});function Xo(r){return fe(r).map(Yo.create)}var Gr=class r{#e;constructor(e){this.#e=o(e)}orderBy(...e){return new r({overNode:gr.cloneWithOrderByItems(this.#e.overNode,K(e))})}clearOrderBy(){return new r({overNode:u.cloneWithoutOrderBy(this.#e.overNode)})}partitionBy(e){return new r({overNode:gr.cloneWithPartitionByItems(this.#e.overNode,Xo(e))})}$call(e){return e(this)}toOperationNode(){return this.#e.overNode}};n();n();n();n();var Ke=o({is(r){return r.kind==="SelectionNode"},create(r){return o({kind:"SelectionNode",selection:r})},createSelectAll(){return o({kind:"SelectionNode",selection:Me.create()})},createSelectAllFromTable(r){return o({kind:"SelectionNode",selection:ze.createSelectAll(r)})}});function T(r){return W(r)?T(r(te())):Q(r)?r.map(e=>Zo(e)):[Zo(r)]}function Zo(r){return g(r)?Ke.create($o(r)):Fr(r)?Ke.create(r.toOperationNode()):Ke.create(jr(r))}function E(r){return r?Array.isArray(r)?r.map(_o):[_o(r)]:[Ke.createSelectAll()]}function _o(r){if(g(r))return Ke.createSelectAllFromTable(p(r));throw new Error(`invalid value selectAll expression: ${JSON.stringify(r)}`)}n();n();var en=o({is(r){return r.kind==="ValuesNode"},create(r){return o({kind:"ValuesNode",values:o(r)})}});n();var rn=o({is(r){return r.kind==="DefaultInsertValueNode"},create(){return o({kind:"DefaultInsertValueNode"})}});function Hr(r){let e=W(r)?r(te()):r,t=Q(e)?e:o([e]);return Vn(t)}function Vn(r){let e=Un(r);return[o([...e.keys()].map(h.create)),en.create(r.map(t=>Jn(t,e)))]}function Un(r){let e=new Map;for(let t of r){let i=Object.keys(t);for(let a of i)!e.has(a)&&t[a]!==void 0&&e.set(a,e.size)}return e}function Jn(r,e){let t=Object.keys(r),i=Array.from({length:e.size}),a=!1,d=t.length;for(let A of t){let B=e.get(A);if(J(B)){d--;continue}let D=r[A];(J(D)||pe(D))&&(a=!0),i[B]=D}if(d<e.size||a){let A=rn.create();return ue.create(i.map(B=>J(B)?A:x(B)))}return Vr.create(i)}n();n();var _t=o({is(r){return r.kind==="ColumnUpdateNode"},create(r,e){return o({kind:"ColumnUpdateNode",column:r,value:e})}});function tn(...r){return r.length===2?[_t.create(q(r[0]),x(r[1]))]:Cr(r[0])}function Cr(r){let e=W(r)?r(te()):r;return Object.entries(e).filter(([t,i])=>i!==void 0).map(([t,i])=>_t.create(h.create(t),x(i)))}n();var on=o({is(r){return r.kind==="OnDuplicateKeyNode"},create(r){return o({kind:"OnDuplicateKeyNode",updates:r})}});n();var Yr=class{insertId;numInsertedOrUpdatedRows;constructor(e,t){this.insertId=e,this.numInsertedOrUpdatedRows=t}};n();var H=class extends Error{node;constructor(e){super("no result"),this.node=e}};function ce(r){return Object.prototype.hasOwnProperty.call(r,"prototype")}n();n();var M=o({is(r){return r.kind==="OnConflictNode"},create(){return o({kind:"OnConflictNode"})},cloneWith(r,e){return o({...r,...e})},cloneWithIndexWhere(r,e){return o({...r,indexWhere:r.indexWhere?I.cloneWithOperation(r.indexWhere,"And",e):I.create(e)})},cloneWithIndexOrWhere(r,e){return o({...r,indexWhere:r.indexWhere?I.cloneWithOperation(r.indexWhere,"Or",e):I.create(e)})},cloneWithUpdateWhere(r,e){return o({...r,updateWhere:r.updateWhere?I.cloneWithOperation(r.updateWhere,"And",e):I.create(e)})},cloneWithUpdateOrWhere(r,e){return o({...r,updateWhere:r.updateWhere?I.cloneWithOperation(r.updateWhere,"Or",e):I.create(e)})},cloneWithoutIndexWhere(r){return o({...r,indexWhere:void 0})},cloneWithoutUpdateWhere(r){return o({...r,updateWhere:void 0})}});var Xr=class r{#e;constructor(e){this.#e=o(e)}column(e){let t=h.create(e);return new r({...this.#e,onConflictNode:M.cloneWith(this.#e.onConflictNode,{columns:this.#e.onConflictNode.columns?o([...this.#e.onConflictNode.columns,t]):o([t])})})}columns(e){let t=e.map(h.create);return new r({...this.#e,onConflictNode:M.cloneWith(this.#e.onConflictNode,{columns:this.#e.onConflictNode.columns?o([...this.#e.onConflictNode.columns,...t]):o(t)})})}constraint(e){return new r({...this.#e,onConflictNode:M.cloneWith(this.#e.onConflictNode,{constraint:c.create(e)})})}expression(e){return new r({...this.#e,onConflictNode:M.cloneWith(this.#e.onConflictNode,{indexExpression:e.toOperationNode()})})}where(...e){return new r({...this.#e,onConflictNode:M.cloneWithIndexWhere(this.#e.onConflictNode,y(e))})}whereRef(e,t,i){return new r({...this.#e,onConflictNode:M.cloneWithIndexWhere(this.#e.onConflictNode,S(e,t,i))})}clearWhere(){return new r({...this.#e,onConflictNode:M.cloneWithoutIndexWhere(this.#e.onConflictNode)})}doNothing(){return new eo({...this.#e,onConflictNode:M.cloneWith(this.#e.onConflictNode,{doNothing:!0})})}doUpdateSet(e){return new ro({...this.#e,onConflictNode:M.cloneWith(this.#e.onConflictNode,{updates:Cr(e)})})}$call(e){return e(this)}},eo=class{#e;constructor(e){this.#e=o(e)}toOperationNode(){return this.#e.onConflictNode}},ro=class r{#e;constructor(e){this.#e=o(e)}where(...e){return new r({...this.#e,onConflictNode:M.cloneWithUpdateWhere(this.#e.onConflictNode,y(e))})}whereRef(e,t,i){return new r({...this.#e,onConflictNode:M.cloneWithUpdateWhere(this.#e.onConflictNode,S(e,t,i))})}clearWhere(){return new r({...this.#e,onConflictNode:M.cloneWithoutUpdateWhere(this.#e.onConflictNode)})}$call(e){return e(this)}toOperationNode(){return this.#e.onConflictNode}};n();n();var nn=o({is(r){return r.kind==="TopNode"},create(r,e){return o({kind:"TopNode",expression:r,modifiers:e})}});function oe(r,e){if(!Fe(r)&&!Dr(r))throw new Error(`Invalid top expression: ${r}`);if(!J(e)&&!$n(e))throw new Error(`Invalid top modifiers: ${e}`);return nn.create(r,e)}function $n(r){return r==="percent"||r==="with ties"||r==="percent with ties"}n();var Ie=o({is(r){return r.kind==="OrActionNode"},create(r){return o({kind:"OrActionNode",action:r})}});var br=class r{#e;constructor(e){this.#e=o(e)}values(e){let[t,i]=Hr(e);return new r({...this.#e,queryNode:b.cloneWith(this.#e.queryNode,{columns:t,values:i})})}columns(e){return new r({...this.#e,queryNode:b.cloneWith(this.#e.queryNode,{columns:o(e.map(h.create))})})}expression(e){return new r({...this.#e,queryNode:b.cloneWith(this.#e.queryNode,{values:U(e)})})}defaultValues(){return new r({...this.#e,queryNode:b.cloneWith(this.#e.queryNode,{defaultValues:!0})})}modifyEnd(e){return new r({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,e.toOperationNode())})}ignore(){return new r({...this.#e,queryNode:b.cloneWith(this.#e.queryNode,{orAction:Ie.create("ignore")})})}orIgnore(){return new r({...this.#e,queryNode:b.cloneWith(this.#e.queryNode,{orAction:Ie.create("ignore")})})}orAbort(){return new r({...this.#e,queryNode:b.cloneWith(this.#e.queryNode,{orAction:Ie.create("abort")})})}orFail(){return new r({...this.#e,queryNode:b.cloneWith(this.#e.queryNode,{orAction:Ie.create("fail")})})}orReplace(){return new r({...this.#e,queryNode:b.cloneWith(this.#e.queryNode,{orAction:Ie.create("replace")})})}orRollback(){return new r({...this.#e,queryNode:b.cloneWith(this.#e.queryNode,{orAction:Ie.create("rollback")})})}top(e,t){return new r({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,oe(e,t))})}onConflict(e){return new r({...this.#e,queryNode:b.cloneWith(this.#e.queryNode,{onConflict:e(new Xr({onConflictNode:M.create()})).toOperationNode()})})}onDuplicateKeyUpdate(e){return new r({...this.#e,queryNode:b.cloneWith(this.#e.queryNode,{onDuplicateKey:on.create(Cr(e))})})}returning(e){return new r({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,T(e))})}returningAll(){return new r({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,E())})}output(e){return new r({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,T(e))})}outputAll(e){return new r({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,E(e))})}clearReturning(){return new r({...this.#e,queryNode:u.cloneWithoutReturning(this.#e.queryNode)})}$call(e){return e(this)}$if(e,t){return e?t(this):new r({...this.#e})}$castTo(){return new r(this.#e)}$narrowType(){return new r(this.#e)}$assertType(){return new r(this.#e)}withPlugin(e){return new r({...this.#e,executor:this.#e.executor.withPlugin(e)})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile(),t=await this.#e.executor.executeQuery(e,this.#e.queryId),{adapter:i}=this.#e.executor,a=e.query;return a.returning&&i.supportsReturning||a.output&&i.supportsOutput?t.rows:[new Yr(t.insertId,t.numAffectedRows??BigInt(0))]}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=H){let t=await this.executeTakeFirst();if(t===void 0)throw ce(e)?new e(this.toOperationNode()):e(this.toOperationNode());return t}async*stream(e=100){let t=this.compile(),i=this.#e.executor.stream(t,e,this.#e.queryId);for await(let a of i)yield*a.rows}async explain(e,t){return await new r({...this.#e,queryNode:u.cloneWithExplain(this.#e.queryNode,e,t)}).execute()}};n();n();var Zr=class{numDeletedRows;constructor(e){this.numDeletedRows=e}};n();var Ge=o({is(r){return r.kind==="LimitNode"},create(r){return o({kind:"LimitNode",limit:r})}});var _r=class r{#e;constructor(e){this.#e=o(e)}where(...e){return new r({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,y(e))})}whereRef(e,t,i){return new r({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,S(e,t,i))})}clearWhere(){return new r({...this.#e,queryNode:u.cloneWithoutWhere(this.#e.queryNode)})}top(e,t){return new r({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,oe(e,t))})}using(e){return new r({...this.#e,queryNode:Te.cloneWithUsing(this.#e.queryNode,ne(e))})}innerJoin(...e){return this.#r("InnerJoin",e)}leftJoin(...e){return this.#r("LeftJoin",e)}rightJoin(...e){return this.#r("RightJoin",e)}fullJoin(...e){return this.#r("FullJoin",e)}#r(e,t){return new r({...this.#e,queryNode:u.cloneWithJoin(this.#e.queryNode,Se(e,t))})}returning(e){return new r({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,T(e))})}returningAll(e){return new r({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,E(e))})}output(e){return new r({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,T(e))})}outputAll(e){return new r({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,E(e))})}clearReturning(){return new r({...this.#e,queryNode:u.cloneWithoutReturning(this.#e.queryNode)})}clearLimit(){return new r({...this.#e,queryNode:Te.cloneWithoutLimit(this.#e.queryNode)})}orderBy(...e){return new r({...this.#e,queryNode:u.cloneWithOrderByItems(this.#e.queryNode,K(e))})}clearOrderBy(){return new r({...this.#e,queryNode:u.cloneWithoutOrderBy(this.#e.queryNode)})}limit(e){return new r({...this.#e,queryNode:Te.cloneWithLimit(this.#e.queryNode,Ge.create(x(e)))})}modifyEnd(e){return new r({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,e.toOperationNode())})}$call(e){return e(this)}$if(e,t){return e?t(this):new r({...this.#e})}$castTo(){return new r(this.#e)}$narrowType(){return new r(this.#e)}$assertType(){return new r(this.#e)}withPlugin(e){return new r({...this.#e,executor:this.#e.executor.withPlugin(e)})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile(),t=await this.#e.executor.executeQuery(e,this.#e.queryId),{adapter:i}=this.#e.executor,a=e.query;return a.returning&&i.supportsReturning||a.output&&i.supportsOutput?t.rows:[new Zr(t.numAffectedRows??BigInt(0))]}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=H){let t=await this.executeTakeFirst();if(t===void 0)throw ce(e)?new e(this.toOperationNode()):e(this.toOperationNode());return t}async*stream(e=100){let t=this.compile(),i=this.#e.executor.stream(t,e,this.#e.queryId);for await(let a of i)yield*a.rows}async explain(e,t){return await new r({...this.#e,queryNode:u.cloneWithExplain(this.#e.queryNode,e,t)}).execute()}};n();n();var et=class{numUpdatedRows;numChangedRows;constructor(e,t){this.numUpdatedRows=e,this.numChangedRows=t}};var je=class r{#e;constructor(e){this.#e=o(e)}where(...e){return new r({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,y(e))})}whereRef(e,t,i){return new r({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,S(e,t,i))})}clearWhere(){return new r({...this.#e,queryNode:u.cloneWithoutWhere(this.#e.queryNode)})}top(e,t){return new r({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,oe(e,t))})}from(e){return new r({...this.#e,queryNode:de.cloneWithFromItems(this.#e.queryNode,ne(e))})}innerJoin(...e){return this.#r("InnerJoin",e)}leftJoin(...e){return this.#r("LeftJoin",e)}rightJoin(...e){return this.#r("RightJoin",e)}fullJoin(...e){return this.#r("FullJoin",e)}#r(e,t){return new r({...this.#e,queryNode:u.cloneWithJoin(this.#e.queryNode,Se(e,t))})}orderBy(...e){return new r({...this.#e,queryNode:u.cloneWithOrderByItems(this.#e.queryNode,K(e))})}clearOrderBy(){return new r({...this.#e,queryNode:u.cloneWithoutOrderBy(this.#e.queryNode)})}limit(e){return new r({...this.#e,queryNode:de.cloneWithLimit(this.#e.queryNode,Ge.create(x(e)))})}set(...e){return new r({...this.#e,queryNode:de.cloneWithUpdates(this.#e.queryNode,tn(...e))})}returning(e){return new r({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,T(e))})}returningAll(e){return new r({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,E(e))})}output(e){return new r({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,T(e))})}outputAll(e){return new r({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,E(e))})}modifyEnd(e){return new r({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,e.toOperationNode())})}clearReturning(){return new r({...this.#e,queryNode:u.cloneWithoutReturning(this.#e.queryNode)})}$call(e){return e(this)}$if(e,t){return e?t(this):new r({...this.#e})}$castTo(){return new r(this.#e)}$narrowType(){return new r(this.#e)}$assertType(){return new r(this.#e)}withPlugin(e){return new r({...this.#e,executor:this.#e.executor.withPlugin(e)})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile(),t=await this.#e.executor.executeQuery(e,this.#e.queryId),{adapter:i}=this.#e.executor,a=e.query;return a.returning&&i.supportsReturning||a.output&&i.supportsOutput?t.rows:[new et(t.numAffectedRows??BigInt(0),t.numChangedRows)]}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=H){let t=await this.executeTakeFirst();if(t===void 0)throw ce(e)?new e(this.toOperationNode()):e(this.toOperationNode());return t}async*stream(e=100){let t=this.compile(),i=this.#e.executor.stream(t,e,this.#e.queryId);for await(let a of i)yield*a.rows}async explain(e,t){return await new r({...this.#e,queryNode:u.cloneWithExplain(this.#e.queryNode,e,t)}).execute()}};n();n();var to=o({is(r){return r.kind==="CommonTableExpressionNameNode"},create(r,e){return o({kind:"CommonTableExpressionNameNode",table:$.create(r),columns:e?o(e.map(h.create)):void 0})}});n();n();var He=o({is(r){return r.kind==="CommonTableExpressionNode"},create(r,e){return o({kind:"CommonTableExpressionNode",name:r,expression:e})},cloneWith(r,e){return o({...r,...e})}});var rt=class r{#e;constructor(e){this.#e=o(e)}materialized(){return new r({...this.#e,node:He.cloneWith(this.#e.node,{materialized:!0})})}notMaterialized(){return new r({...this.#e,node:He.cloneWith(this.#e.node,{materialized:!1})})}toOperationNode(){return this.#e.node}};function oo(r,e){let t=e(an()).toOperationNode();return W(r)?r(Kn(t)).toOperationNode():He.create(sn(r),t)}function Kn(r){return e=>new rt({node:He.create(sn(e),r)})}function sn(r){if(r.includes("(")){let e=r.split(/[\(\)]/),t=e[0],i=e[1].split(",").map(a=>a.trim());return to.create(t,i)}else return to.create(r)}n();var kr=o({is(r){return r.kind==="WithNode"},create(r,e){return o({kind:"WithNode",expressions:o([r]),...e})},cloneWithExpression(r,e){return o({...r,expressions:o([...r.expressions,e])})}});n();n();var un=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9"];function dn(r){let e="";for(let t=0;t<r;++t)e+=Gn();return e}function Gn(){return un[~~(Math.random()*un.length)]}function O(){return new no}var no=class{#e;get queryId(){return this.#e===void 0&&(this.#e=dn(8)),this.#e}};n();n();n();var Ee=class{nodeStack=[];#e=o({AliasNode:this.transformAlias.bind(this),ColumnNode:this.transformColumn.bind(this),IdentifierNode:this.transformIdentifier.bind(this),SchemableIdentifierNode:this.transformSchemableIdentifier.bind(this),RawNode:this.transformRaw.bind(this),ReferenceNode:this.transformReference.bind(this),SelectQueryNode:this.transformSelectQuery.bind(this),SelectionNode:this.transformSelection.bind(this),TableNode:this.transformTable.bind(this),FromNode:this.transformFrom.bind(this),SelectAllNode:this.transformSelectAll.bind(this),AndNode:this.transformAnd.bind(this),OrNode:this.transformOr.bind(this),ValueNode:this.transformValue.bind(this),ValueListNode:this.transformValueList.bind(this),PrimitiveValueListNode:this.transformPrimitiveValueList.bind(this),ParensNode:this.transformParens.bind(this),JoinNode:this.transformJoin.bind(this),OperatorNode:this.transformOperator.bind(this),WhereNode:this.transformWhere.bind(this),InsertQueryNode:this.transformInsertQuery.bind(this),DeleteQueryNode:this.transformDeleteQuery.bind(this),ReturningNode:this.transformReturning.bind(this),CreateTableNode:this.transformCreateTable.bind(this),AddColumnNode:this.transformAddColumn.bind(this),ColumnDefinitionNode:this.transformColumnDefinition.bind(this),DropTableNode:this.transformDropTable.bind(this),DataTypeNode:this.transformDataType.bind(this),OrderByNode:this.transformOrderBy.bind(this),OrderByItemNode:this.transformOrderByItem.bind(this),GroupByNode:this.transformGroupBy.bind(this),GroupByItemNode:this.transformGroupByItem.bind(this),UpdateQueryNode:this.transformUpdateQuery.bind(this),ColumnUpdateNode:this.transformColumnUpdate.bind(this),LimitNode:this.transformLimit.bind(this),OffsetNode:this.transformOffset.bind(this),OnConflictNode:this.transformOnConflict.bind(this),OnDuplicateKeyNode:this.transformOnDuplicateKey.bind(this),CreateIndexNode:this.transformCreateIndex.bind(this),DropIndexNode:this.transformDropIndex.bind(this),ListNode:this.transformList.bind(this),PrimaryKeyConstraintNode:this.transformPrimaryKeyConstraint.bind(this),UniqueConstraintNode:this.transformUniqueConstraint.bind(this),ReferencesNode:this.transformReferences.bind(this),CheckConstraintNode:this.transformCheckConstraint.bind(this),WithNode:this.transformWith.bind(this),CommonTableExpressionNode:this.transformCommonTableExpression.bind(this),CommonTableExpressionNameNode:this.transformCommonTableExpressionName.bind(this),HavingNode:this.transformHaving.bind(this),CreateSchemaNode:this.transformCreateSchema.bind(this),DropSchemaNode:this.transformDropSchema.bind(this),AlterTableNode:this.transformAlterTable.bind(this),DropColumnNode:this.transformDropColumn.bind(this),RenameColumnNode:this.transformRenameColumn.bind(this),AlterColumnNode:this.transformAlterColumn.bind(this),ModifyColumnNode:this.transformModifyColumn.bind(this),AddConstraintNode:this.transformAddConstraint.bind(this),DropConstraintNode:this.transformDropConstraint.bind(this),RenameConstraintNode:this.transformRenameConstraint.bind(this),ForeignKeyConstraintNode:this.transformForeignKeyConstraint.bind(this),CreateViewNode:this.transformCreateView.bind(this),RefreshMaterializedViewNode:this.transformRefreshMaterializedView.bind(this),DropViewNode:this.transformDropView.bind(this),GeneratedNode:this.transformGenerated.bind(this),DefaultValueNode:this.transformDefaultValue.bind(this),OnNode:this.transformOn.bind(this),ValuesNode:this.transformValues.bind(this),SelectModifierNode:this.transformSelectModifier.bind(this),CreateTypeNode:this.transformCreateType.bind(this),DropTypeNode:this.transformDropType.bind(this),ExplainNode:this.transformExplain.bind(this),DefaultInsertValueNode:this.transformDefaultInsertValue.bind(this),AggregateFunctionNode:this.transformAggregateFunction.bind(this),OverNode:this.transformOver.bind(this),PartitionByNode:this.transformPartitionBy.bind(this),PartitionByItemNode:this.transformPartitionByItem.bind(this),SetOperationNode:this.transformSetOperation.bind(this),BinaryOperationNode:this.transformBinaryOperation.bind(this),UnaryOperationNode:this.transformUnaryOperation.bind(this),UsingNode:this.transformUsing.bind(this),FunctionNode:this.transformFunction.bind(this),CaseNode:this.transformCase.bind(this),WhenNode:this.transformWhen.bind(this),JSONReferenceNode:this.transformJSONReference.bind(this),JSONPathNode:this.transformJSONPath.bind(this),JSONPathLegNode:this.transformJSONPathLeg.bind(this),JSONOperatorChainNode:this.transformJSONOperatorChain.bind(this),TupleNode:this.transformTuple.bind(this),MergeQueryNode:this.transformMergeQuery.bind(this),MatchedNode:this.transformMatched.bind(this),AddIndexNode:this.transformAddIndex.bind(this),CastNode:this.transformCast.bind(this),FetchNode:this.transformFetch.bind(this),TopNode:this.transformTop.bind(this),OutputNode:this.transformOutput.bind(this),OrActionNode:this.transformOrAction.bind(this),CollateNode:this.transformCollate.bind(this)});transformNode(e,t){if(!e)return e;this.nodeStack.push(e);let i=this.transformNodeImpl(e,t);return this.nodeStack.pop(),o(i)}transformNodeImpl(e,t){return this.#e[e.kind](e,t)}transformNodeList(e,t){return e&&o(e.map(i=>this.transformNode(i,t)))}transformSelectQuery(e,t){return{kind:"SelectQueryNode",from:this.transformNode(e.from,t),selections:this.transformNodeList(e.selections,t),distinctOn:this.transformNodeList(e.distinctOn,t),joins:this.transformNodeList(e.joins,t),groupBy:this.transformNode(e.groupBy,t),orderBy:this.transformNode(e.orderBy,t),where:this.transformNode(e.where,t),frontModifiers:this.transformNodeList(e.frontModifiers,t),endModifiers:this.transformNodeList(e.endModifiers,t),limit:this.transformNode(e.limit,t),offset:this.transformNode(e.offset,t),with:this.transformNode(e.with,t),having:this.transformNode(e.having,t),explain:this.transformNode(e.explain,t),setOperations:this.transformNodeList(e.setOperations,t),fetch:this.transformNode(e.fetch,t),top:this.transformNode(e.top,t)}}transformSelection(e,t){return{kind:"SelectionNode",selection:this.transformNode(e.selection,t)}}transformColumn(e,t){return{kind:"ColumnNode",column:this.transformNode(e.column,t)}}transformAlias(e,t){return{kind:"AliasNode",node:this.transformNode(e.node,t),alias:this.transformNode(e.alias,t)}}transformTable(e,t){return{kind:"TableNode",table:this.transformNode(e.table,t)}}transformFrom(e,t){return{kind:"FromNode",froms:this.transformNodeList(e.froms,t)}}transformReference(e,t){return{kind:"ReferenceNode",column:this.transformNode(e.column,t),table:this.transformNode(e.table,t)}}transformAnd(e,t){return{kind:"AndNode",left:this.transformNode(e.left,t),right:this.transformNode(e.right,t)}}transformOr(e,t){return{kind:"OrNode",left:this.transformNode(e.left,t),right:this.transformNode(e.right,t)}}transformValueList(e,t){return{kind:"ValueListNode",values:this.transformNodeList(e.values,t)}}transformParens(e,t){return{kind:"ParensNode",node:this.transformNode(e.node,t)}}transformJoin(e,t){return{kind:"JoinNode",joinType:e.joinType,table:this.transformNode(e.table,t),on:this.transformNode(e.on,t)}}transformRaw(e,t){return{kind:"RawNode",sqlFragments:o([...e.sqlFragments]),parameters:this.transformNodeList(e.parameters,t)}}transformWhere(e,t){return{kind:"WhereNode",where:this.transformNode(e.where,t)}}transformInsertQuery(e,t){return{kind:"InsertQueryNode",into:this.transformNode(e.into,t),columns:this.transformNodeList(e.columns,t),values:this.transformNode(e.values,t),returning:this.transformNode(e.returning,t),onConflict:this.transformNode(e.onConflict,t),onDuplicateKey:this.transformNode(e.onDuplicateKey,t),endModifiers:this.transformNodeList(e.endModifiers,t),with:this.transformNode(e.with,t),ignore:e.ignore,orAction:this.transformNode(e.orAction,t),replace:e.replace,explain:this.transformNode(e.explain,t),defaultValues:e.defaultValues,top:this.transformNode(e.top,t),output:this.transformNode(e.output,t)}}transformValues(e,t){return{kind:"ValuesNode",values:this.transformNodeList(e.values,t)}}transformDeleteQuery(e,t){return{kind:"DeleteQueryNode",from:this.transformNode(e.from,t),using:this.transformNode(e.using,t),joins:this.transformNodeList(e.joins,t),where:this.transformNode(e.where,t),returning:this.transformNode(e.returning,t),endModifiers:this.transformNodeList(e.endModifiers,t),with:this.transformNode(e.with,t),orderBy:this.transformNode(e.orderBy,t),limit:this.transformNode(e.limit,t),explain:this.transformNode(e.explain,t),top:this.transformNode(e.top,t),output:this.transformNode(e.output,t)}}transformReturning(e,t){return{kind:"ReturningNode",selections:this.transformNodeList(e.selections,t)}}transformCreateTable(e,t){return{kind:"CreateTableNode",table:this.transformNode(e.table,t),columns:this.transformNodeList(e.columns,t),constraints:this.transformNodeList(e.constraints,t),temporary:e.temporary,ifNotExists:e.ifNotExists,onCommit:e.onCommit,frontModifiers:this.transformNodeList(e.frontModifiers,t),endModifiers:this.transformNodeList(e.endModifiers,t),selectQuery:this.transformNode(e.selectQuery,t)}}transformColumnDefinition(e,t){return{kind:"ColumnDefinitionNode",column:this.transformNode(e.column,t),dataType:this.transformNode(e.dataType,t),references:this.transformNode(e.references,t),primaryKey:e.primaryKey,autoIncrement:e.autoIncrement,unique:e.unique,notNull:e.notNull,unsigned:e.unsigned,defaultTo:this.transformNode(e.defaultTo,t),check:this.transformNode(e.check,t),generated:this.transformNode(e.generated,t),frontModifiers:this.transformNodeList(e.frontModifiers,t),endModifiers:this.transformNodeList(e.endModifiers,t),nullsNotDistinct:e.nullsNotDistinct,identity:e.identity,ifNotExists:e.ifNotExists}}transformAddColumn(e,t){return{kind:"AddColumnNode",column:this.transformNode(e.column,t)}}transformDropTable(e,t){return{kind:"DropTableNode",table:this.transformNode(e.table,t),ifExists:e.ifExists,cascade:e.cascade}}transformOrderBy(e,t){return{kind:"OrderByNode",items:this.transformNodeList(e.items,t)}}transformOrderByItem(e,t){return{kind:"OrderByItemNode",orderBy:this.transformNode(e.orderBy,t),direction:this.transformNode(e.direction,t),collation:this.transformNode(e.collation,t),nulls:e.nulls}}transformGroupBy(e,t){return{kind:"GroupByNode",items:this.transformNodeList(e.items,t)}}transformGroupByItem(e,t){return{kind:"GroupByItemNode",groupBy:this.transformNode(e.groupBy,t)}}transformUpdateQuery(e,t){return{kind:"UpdateQueryNode",table:this.transformNode(e.table,t),from:this.transformNode(e.from,t),joins:this.transformNodeList(e.joins,t),where:this.transformNode(e.where,t),updates:this.transformNodeList(e.updates,t),returning:this.transformNode(e.returning,t),endModifiers:this.transformNodeList(e.endModifiers,t),with:this.transformNode(e.with,t),explain:this.transformNode(e.explain,t),limit:this.transformNode(e.limit,t),top:this.transformNode(e.top,t),output:this.transformNode(e.output,t),orderBy:this.transformNode(e.orderBy,t)}}transformColumnUpdate(e,t){return{kind:"ColumnUpdateNode",column:this.transformNode(e.column,t),value:this.transformNode(e.value,t)}}transformLimit(e,t){return{kind:"LimitNode",limit:this.transformNode(e.limit,t)}}transformOffset(e,t){return{kind:"OffsetNode",offset:this.transformNode(e.offset,t)}}transformOnConflict(e,t){return{kind:"OnConflictNode",columns:this.transformNodeList(e.columns,t),constraint:this.transformNode(e.constraint,t),indexExpression:this.transformNode(e.indexExpression,t),indexWhere:this.transformNode(e.indexWhere,t),updates:this.transformNodeList(e.updates,t),updateWhere:this.transformNode(e.updateWhere,t),doNothing:e.doNothing}}transformOnDuplicateKey(e,t){return{kind:"OnDuplicateKeyNode",updates:this.transformNodeList(e.updates,t)}}transformCreateIndex(e,t){return{kind:"CreateIndexNode",name:this.transformNode(e.name,t),table:this.transformNode(e.table,t),columns:this.transformNodeList(e.columns,t),unique:e.unique,using:this.transformNode(e.using,t),ifNotExists:e.ifNotExists,where:this.transformNode(e.where,t),nullsNotDistinct:e.nullsNotDistinct}}transformList(e,t){return{kind:"ListNode",items:this.transformNodeList(e.items,t)}}transformDropIndex(e,t){return{kind:"DropIndexNode",name:this.transformNode(e.name,t),table:this.transformNode(e.table,t),ifExists:e.ifExists,cascade:e.cascade}}transformPrimaryKeyConstraint(e,t){return{kind:"PrimaryKeyConstraintNode",columns:this.transformNodeList(e.columns,t),name:this.transformNode(e.name,t),deferrable:e.deferrable,initiallyDeferred:e.initiallyDeferred}}transformUniqueConstraint(e,t){return{kind:"UniqueConstraintNode",columns:this.transformNodeList(e.columns,t),name:this.transformNode(e.name,t),nullsNotDistinct:e.nullsNotDistinct,deferrable:e.deferrable,initiallyDeferred:e.initiallyDeferred}}transformForeignKeyConstraint(e,t){return{kind:"ForeignKeyConstraintNode",columns:this.transformNodeList(e.columns,t),references:this.transformNode(e.references,t),name:this.transformNode(e.name,t),onDelete:e.onDelete,onUpdate:e.onUpdate,deferrable:e.deferrable,initiallyDeferred:e.initiallyDeferred}}transformSetOperation(e,t){return{kind:"SetOperationNode",operator:e.operator,expression:this.transformNode(e.expression,t),all:e.all}}transformReferences(e,t){return{kind:"ReferencesNode",table:this.transformNode(e.table,t),columns:this.transformNodeList(e.columns,t),onDelete:e.onDelete,onUpdate:e.onUpdate}}transformCheckConstraint(e,t){return{kind:"CheckConstraintNode",expression:this.transformNode(e.expression,t),name:this.transformNode(e.name,t)}}transformWith(e,t){return{kind:"WithNode",expressions:this.transformNodeList(e.expressions,t),recursive:e.recursive}}transformCommonTableExpression(e,t){return{kind:"CommonTableExpressionNode",name:this.transformNode(e.name,t),materialized:e.materialized,expression:this.transformNode(e.expression,t)}}transformCommonTableExpressionName(e,t){return{kind:"CommonTableExpressionNameNode",table:this.transformNode(e.table,t),columns:this.transformNodeList(e.columns,t)}}transformHaving(e,t){return{kind:"HavingNode",having:this.transformNode(e.having,t)}}transformCreateSchema(e,t){return{kind:"CreateSchemaNode",schema:this.transformNode(e.schema,t),ifNotExists:e.ifNotExists}}transformDropSchema(e,t){return{kind:"DropSchemaNode",schema:this.transformNode(e.schema,t),ifExists:e.ifExists,cascade:e.cascade}}transformAlterTable(e,t){return{kind:"AlterTableNode",table:this.transformNode(e.table,t),renameTo:this.transformNode(e.renameTo,t),setSchema:this.transformNode(e.setSchema,t),columnAlterations:this.transformNodeList(e.columnAlterations,t),addConstraint:this.transformNode(e.addConstraint,t),dropConstraint:this.transformNode(e.dropConstraint,t),renameConstraint:this.transformNode(e.renameConstraint,t),addIndex:this.transformNode(e.addIndex,t),dropIndex:this.transformNode(e.dropIndex,t)}}transformDropColumn(e,t){return{kind:"DropColumnNode",column:this.transformNode(e.column,t)}}transformRenameColumn(e,t){return{kind:"RenameColumnNode",column:this.transformNode(e.column,t),renameTo:this.transformNode(e.renameTo,t)}}transformAlterColumn(e,t){return{kind:"AlterColumnNode",column:this.transformNode(e.column,t),dataType:this.transformNode(e.dataType,t),dataTypeExpression:this.transformNode(e.dataTypeExpression,t),setDefault:this.transformNode(e.setDefault,t),dropDefault:e.dropDefault,setNotNull:e.setNotNull,dropNotNull:e.dropNotNull}}transformModifyColumn(e,t){return{kind:"ModifyColumnNode",column:this.transformNode(e.column,t)}}transformAddConstraint(e,t){return{kind:"AddConstraintNode",constraint:this.transformNode(e.constraint,t)}}transformDropConstraint(e,t){return{kind:"DropConstraintNode",constraintName:this.transformNode(e.constraintName,t),ifExists:e.ifExists,modifier:e.modifier}}transformRenameConstraint(e,t){return{kind:"RenameConstraintNode",oldName:this.transformNode(e.oldName,t),newName:this.transformNode(e.newName,t)}}transformCreateView(e,t){return{kind:"CreateViewNode",name:this.transformNode(e.name,t),temporary:e.temporary,orReplace:e.orReplace,ifNotExists:e.ifNotExists,materialized:e.materialized,columns:this.transformNodeList(e.columns,t),as:this.transformNode(e.as,t)}}transformRefreshMaterializedView(e,t){return{kind:"RefreshMaterializedViewNode",name:this.transformNode(e.name,t),concurrently:e.concurrently,withNoData:e.withNoData}}transformDropView(e,t){return{kind:"DropViewNode",name:this.transformNode(e.name,t),ifExists:e.ifExists,materialized:e.materialized,cascade:e.cascade}}transformGenerated(e,t){return{kind:"GeneratedNode",byDefault:e.byDefault,always:e.always,identity:e.identity,stored:e.stored,expression:this.transformNode(e.expression,t)}}transformDefaultValue(e,t){return{kind:"DefaultValueNode",defaultValue:this.transformNode(e.defaultValue,t)}}transformOn(e,t){return{kind:"OnNode",on:this.transformNode(e.on,t)}}transformSelectModifier(e,t){return{kind:"SelectModifierNode",modifier:e.modifier,rawModifier:this.transformNode(e.rawModifier,t),of:this.transformNodeList(e.of,t)}}transformCreateType(e,t){return{kind:"CreateTypeNode",name:this.transformNode(e.name,t),enum:this.transformNode(e.enum,t)}}transformDropType(e,t){return{kind:"DropTypeNode",name:this.transformNode(e.name,t),ifExists:e.ifExists}}transformExplain(e,t){return{kind:"ExplainNode",format:e.format,options:this.transformNode(e.options,t)}}transformSchemableIdentifier(e,t){return{kind:"SchemableIdentifierNode",schema:this.transformNode(e.schema,t),identifier:this.transformNode(e.identifier,t)}}transformAggregateFunction(e,t){return{kind:"AggregateFunctionNode",func:e.func,aggregated:this.transformNodeList(e.aggregated,t),distinct:e.distinct,orderBy:this.transformNode(e.orderBy,t),withinGroup:this.transformNode(e.withinGroup,t),filter:this.transformNode(e.filter,t),over:this.transformNode(e.over,t)}}transformOver(e,t){return{kind:"OverNode",orderBy:this.transformNode(e.orderBy,t),partitionBy:this.transformNode(e.partitionBy,t)}}transformPartitionBy(e,t){return{kind:"PartitionByNode",items:this.transformNodeList(e.items,t)}}transformPartitionByItem(e,t){return{kind:"PartitionByItemNode",partitionBy:this.transformNode(e.partitionBy,t)}}transformBinaryOperation(e,t){return{kind:"BinaryOperationNode",leftOperand:this.transformNode(e.leftOperand,t),operator:this.transformNode(e.operator,t),rightOperand:this.transformNode(e.rightOperand,t)}}transformUnaryOperation(e,t){return{kind:"UnaryOperationNode",operator:this.transformNode(e.operator,t),operand:this.transformNode(e.operand,t)}}transformUsing(e,t){return{kind:"UsingNode",tables:this.transformNodeList(e.tables,t)}}transformFunction(e,t){return{kind:"FunctionNode",func:e.func,arguments:this.transformNodeList(e.arguments,t)}}transformCase(e,t){return{kind:"CaseNode",value:this.transformNode(e.value,t),when:this.transformNodeList(e.when,t),else:this.transformNode(e.else,t),isStatement:e.isStatement}}transformWhen(e,t){return{kind:"WhenNode",condition:this.transformNode(e.condition,t),result:this.transformNode(e.result,t)}}transformJSONReference(e,t){return{kind:"JSONReferenceNode",reference:this.transformNode(e.reference,t),traversal:this.transformNode(e.traversal,t)}}transformJSONPath(e,t){return{kind:"JSONPathNode",inOperator:this.transformNode(e.inOperator,t),pathLegs:this.transformNodeList(e.pathLegs,t)}}transformJSONPathLeg(e,t){return{kind:"JSONPathLegNode",type:e.type,value:e.value}}transformJSONOperatorChain(e,t){return{kind:"JSONOperatorChainNode",operator:this.transformNode(e.operator,t),values:this.transformNodeList(e.values,t)}}transformTuple(e,t){return{kind:"TupleNode",values:this.transformNodeList(e.values,t)}}transformMergeQuery(e,t){return{kind:"MergeQueryNode",into:this.transformNode(e.into,t),using:this.transformNode(e.using,t),whens:this.transformNodeList(e.whens,t),with:this.transformNode(e.with,t),top:this.transformNode(e.top,t),endModifiers:this.transformNodeList(e.endModifiers,t),output:this.transformNode(e.output,t),returning:this.transformNode(e.returning,t)}}transformMatched(e,t){return{kind:"MatchedNode",not:e.not,bySource:e.bySource}}transformAddIndex(e,t){return{kind:"AddIndexNode",name:this.transformNode(e.name,t),columns:this.transformNodeList(e.columns,t),unique:e.unique,using:this.transformNode(e.using,t),ifNotExists:e.ifNotExists}}transformCast(e,t){return{kind:"CastNode",expression:this.transformNode(e.expression,t),dataType:this.transformNode(e.dataType,t)}}transformFetch(e,t){return{kind:"FetchNode",rowCount:this.transformNode(e.rowCount,t),modifier:e.modifier}}transformTop(e,t){return{kind:"TopNode",expression:e.expression,modifiers:e.modifiers}}transformOutput(e,t){return{kind:"OutputNode",selections:this.transformNodeList(e.selections,t)}}transformDataType(e,t){return e}transformSelectAll(e,t){return e}transformIdentifier(e,t){return e}transformValue(e,t){return e}transformPrimitiveValueList(e,t){return e}transformOperator(e,t){return e}transformDefaultInsertValue(e,t){return e}transformOrAction(e,t){return e}transformCollate(e,t){return e}};var jn=o({AlterTableNode:!0,CreateIndexNode:!0,CreateSchemaNode:!0,CreateTableNode:!0,CreateTypeNode:!0,CreateViewNode:!0,RefreshMaterializedViewNode:!0,DeleteQueryNode:!0,DropIndexNode:!0,DropSchemaNode:!0,DropTableNode:!0,DropTypeNode:!0,DropViewNode:!0,InsertQueryNode:!0,RawNode:!0,SelectQueryNode:!0,UpdateQueryNode:!0,MergeQueryNode:!0}),Hn={json_agg:!0,to_json:!0},tt=class extends Ee{#e;#r=new Set;#t=new Set;constructor(e){super(),this.#e=e}transformNodeImpl(e,t){if(!this.#o(e))return super.transformNodeImpl(e,t);let i=this.#d(e);for(let m of i)this.#t.add(m);let a=this.#a(e);for(let m of a)this.#r.add(m);let d=super.transformNodeImpl(e,t);for(let m of a)this.#r.delete(m);for(let m of i)this.#t.delete(m);return d}transformSchemableIdentifier(e,t){let i=super.transformSchemableIdentifier(e,t);return i.schema||!this.#r.has(e.identifier.name)?i:{...i,schema:c.create(this.#e)}}transformReferences(e,t){let i=super.transformReferences(e,t);return i.table.table.schema?i:{...i,table:$.createWithSchema(this.#e,i.table.table.identifier.name)}}transformAggregateFunction(e,t){return{...super.transformAggregateFunction({...e,aggregated:[]},t),aggregated:this.#i(e,t,"aggregated")}}transformFunction(e,t){return{...super.transformFunction({...e,arguments:[]},t),arguments:this.#i(e,t,"arguments")}}#i(e,t,i){return Hn[e.func]?e[i].map(a=>!$.is(a)||a.table.schema?this.transformNode(a,t):{...a,table:this.transformIdentifier(a.table.identifier,t)}):this.transformNodeList(e[i],t)}#o(e){return e.kind in jn}#a(e){let t=new Set;if("name"in e&&e.name&&P.is(e.name)&&this.#s(e.name,t),"from"in e&&e.from)for(let i of e.from.froms)this.#n(i,t);if("into"in e&&e.into&&this.#n(e.into,t),"table"in e&&e.table&&this.#n(e.table,t),"joins"in e&&e.joins)for(let i of e.joins)this.#n(i.table,t);return"using"in e&&e.using&&this.#n(e.using,t),t}#d(e){let t=new Set;return"with"in e&&e.with&&this.#u(e.with,t),t}#n(e,t){if($.is(e))this.#s(e.table,t);else if(v.is(e)&&$.is(e.node))this.#s(e.node.table,t);else if($r.is(e))for(let i of e.items)this.#n(i,t)}#s(e,t){let i=e.identifier.name;!this.#r.has(i)&&!this.#t.has(i)&&t.add(i)}#u(e,t){for(let i of e.expressions){let a=i.name.table.table.identifier.name;this.#t.has(a)||t.add(a)}}};var Y=class{#e;constructor(e){this.#e=new tt(e)}transformQuery(e){return this.#e.transformNode(e.node,e.queryId)}async transformResult(e){return e.result}};n();n();n();var cn=o({is(r){return r.kind==="MatchedNode"},create(r,e=!1){return o({kind:"MatchedNode",not:r,bySource:e})}});function io(r,e,t){return ye.create($e([cn.create(!r.isMatched,r.bySource),...e&&e.length>0?[e.length===3&&t?S(e[0],e[1],e[2]):y(e)]:[]],"and",!1))}function Ye(r){return g(r)?L.create([r],[]):C(r)?r.toOperationNode():r}n();n();n();n();var Tr=class{#e;#r;#t;constructor(){this.#e=new Promise((e,t)=>{this.#t=t,this.#r=e})}get promise(){return this.#e}resolve=e=>{this.#r&&this.#r(e)};reject=e=>{this.#t&&this.#t(e)}};async function ot(r){let e=new Tr,t=new Tr;return r.provideConnection(async i=>(e.resolve(i),await t.promise)).catch(i=>e.reject(i)),o({connection:await e.promise,release:t.resolve})}var Yn=o([]),Xe=class{#e;constructor(e=Yn){this.#e=e}get plugins(){return this.#e}transformQuery(e,t){for(let i of this.#e){let a=i.transformQuery({node:e,queryId:t});if(a.kind===e.kind)e=a;else throw new Error(["KyselyPlugin.transformQuery must return a node","of the same kind that was given to it.",`The plugin was given a ${e.kind}`,`but it returned a ${a.kind}`].join(" "))}return e}async executeQuery(e,t){return await this.provideConnection(async i=>{let a=await i.executeQuery(e);return"numUpdatedOrDeletedRows"in a&&Ve("kysely:warning: outdated driver/plugin detected! `QueryResult.numUpdatedOrDeletedRows` has been replaced with `QueryResult.numAffectedRows`."),await this.#r(a,t)})}async*stream(e,t,i){let{connection:a,release:d}=await ot(this);try{for await(let m of a.streamQuery(e,t))yield await this.#r(m,i)}finally{d()}}async#r(e,t){for(let i of this.#e)e=await i.transformResult({result:e,queryId:t});return e}};var so=class r extends Xe{get adapter(){throw new Error("this query cannot be compiled to SQL")}compileQuery(){throw new Error("this query cannot be compiled to SQL")}provideConnection(){throw new Error("this query cannot be executed")}withConnectionProvider(){throw new Error("this query cannot have a connection provider")}withPlugin(e){return new r([...this.plugins,e])}withPlugins(e){return new r([...this.plugins,...e])}withPluginAtFront(e){return new r([e,...this.plugins])}withoutPlugins(){return new r([])}},Ze=new so;n();var nt=class{numChangedRows;constructor(e){this.numChangedRows=e}};var it=class r{#e;constructor(e){this.#e=o(e)}modifyEnd(e){return new r({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,e.toOperationNode())})}top(e,t){return new r({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,oe(e,t))})}using(...e){return new Ae({...this.#e,queryNode:G.cloneWithUsing(this.#e.queryNode,Se("Using",e))})}returning(e){return new r({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,T(e))})}returningAll(e){return new r({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,E(e))})}output(e){return new r({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,T(e))})}outputAll(e){return new r({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,E(e))})}},Ae=class r{#e;constructor(e){this.#e=o(e)}modifyEnd(e){return new r({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,e.toOperationNode())})}top(e,t){return new r({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,oe(e,t))})}whenMatched(){return this.#r([])}whenMatchedAnd(...e){return this.#r(e)}whenMatchedAndRef(e,t,i){return this.#r([e,t,i],!0)}#r(e,t){return new st({...this.#e,queryNode:G.cloneWithWhen(this.#e.queryNode,io({isMatched:!0},e,t))})}whenNotMatched(){return this.#t([])}whenNotMatchedAnd(...e){return this.#t(e)}whenNotMatchedAndRef(e,t,i){return this.#t([e,t,i],!0)}whenNotMatchedBySource(){return this.#t([],!1,!0)}whenNotMatchedBySourceAnd(...e){return this.#t(e,!1,!0)}whenNotMatchedBySourceAndRef(e,t,i){return this.#t([e,t,i],!0,!0)}returning(e){return new r({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,T(e))})}returningAll(e){return new r({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,E(e))})}output(e){return new r({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,T(e))})}outputAll(e){return new r({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,E(e))})}#t(e,t=!1,i=!1){let a={...this.#e,queryNode:G.cloneWithWhen(this.#e.queryNode,io({isMatched:!1,bySource:i},e,t))},d=i?st:ao;return new d(a)}$call(e){return e(this)}$if(e,t){return e?t(this):new r({...this.#e})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile(),t=await this.#e.executor.executeQuery(e,this.#e.queryId),{adapter:i}=this.#e.executor,a=e.query;return a.returning&&i.supportsReturning||a.output&&i.supportsOutput?t.rows:[new nt(t.numAffectedRows)]}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=H){let t=await this.executeTakeFirst();if(t===void 0)throw ce(e)?new e(this.toOperationNode()):e(this.toOperationNode());return t}},st=class{#e;constructor(e){this.#e=o(e)}thenDelete(){return new Ae({...this.#e,queryNode:G.cloneWithThen(this.#e.queryNode,Ye("delete"))})}thenDoNothing(){return new Ae({...this.#e,queryNode:G.cloneWithThen(this.#e.queryNode,Ye("do nothing"))})}thenUpdate(e){return new Ae({...this.#e,queryNode:G.cloneWithThen(this.#e.queryNode,Ye(e(new je({queryId:this.#e.queryId,executor:Ze,queryNode:de.createWithoutTable()}))))})}thenUpdateSet(...e){return this.thenUpdate(t=>t.set(...e))}},ao=class{#e;constructor(e){this.#e=o(e)}thenDoNothing(){return new Ae({...this.#e,queryNode:G.cloneWithThen(this.#e.queryNode,Ye("do nothing"))})}thenInsertValues(e){let[t,i]=Hr(e);return new Ae({...this.#e,queryNode:G.cloneWithThen(this.#e.queryNode,Ye(b.cloneWith(b.createWithoutInto(),{columns:t,values:i})))})}};var _e=class r{#e;constructor(e){this.#e=o(e)}selectFrom(e){return Sr({queryId:O(),executor:this.#e.executor,queryNode:N.createFrom(ne(e),this.#e.withNode)})}selectNoFrom(e){return Sr({queryId:O(),executor:this.#e.executor,queryNode:N.cloneWithSelections(N.create(this.#e.withNode),T(e))})}insertInto(e){return new br({queryId:O(),executor:this.#e.executor,queryNode:b.create(p(e),this.#e.withNode)})}replaceInto(e){return new br({queryId:O(),executor:this.#e.executor,queryNode:b.create(p(e),this.#e.withNode,!0)})}deleteFrom(e){return new _r({queryId:O(),executor:this.#e.executor,queryNode:Te.create(ne(e),this.#e.withNode)})}updateTable(e){return new je({queryId:O(),executor:this.#e.executor,queryNode:de.create(ne(e),this.#e.withNode)})}mergeInto(e){return new it({queryId:O(),executor:this.#e.executor,queryNode:G.create(uo(e),this.#e.withNode)})}with(e,t){let i=oo(e,t);return new r({...this.#e,withNode:this.#e.withNode?kr.cloneWithExpression(this.#e.withNode,i):kr.create(i)})}withRecursive(e,t){let i=oo(e,t);return new r({...this.#e,withNode:this.#e.withNode?kr.cloneWithExpression(this.#e.withNode,i):kr.create(i,{recursive:!0})})}withPlugin(e){return new r({...this.#e,executor:this.#e.executor.withPlugin(e)})}withoutPlugins(){return new r({...this.#e,executor:this.#e.executor.withoutPlugins()})}withSchema(e){return new r({...this.#e,executor:this.#e.executor.withPluginAtFront(new Y(e))})}};function an(){return new _e({executor:Ze})}function mn(r,e){return new Kr({joinNode:le.create(r,Be(e))})}function hn(){return new Gr({overNode:gr.create()})}function Se(r,e){if(e.length===3)return Zn(r,e[0],e[1],e[2]);if(e.length===2)return Xn(r,e[0],e[1]);if(e.length===1)return _n(r,e[0]);throw new Error("not implemented")}function Xn(r,e,t){return t(mn(r,e)).toOperationNode()}function Zn(r,e,t,i){return le.createWithOn(r,Be(e),S(t,"=",i))}function _n(r,e){return le.create(r,Be(e))}n();var ln=o({is(r){return r.kind==="OffsetNode"},create(r){return o({kind:"OffsetNode",offset:r})}});n();n();var pn=o({is(r){return r.kind==="GroupByItemNode"},create(r){return o({kind:"GroupByItemNode",groupBy:r})}});function fn(r){return r=W(r)?r(te()):r,fe(r).map(pn.create)}n();n();var Nn=o({is(r){return r.kind==="SetOperationNode"},create(r,e,t){return o({kind:"SetOperationNode",operator:r,expression:e,all:t})}});function De(r,e,t){return W(e)&&(e=e(at())),Q(e)||(e=[e]),e.map(i=>Nn.create(r,U(i),t))}n();var f=class r{#e;constructor(e){this.#e=e}get expressionType(){}as(e){return new Er(this,e)}or(...e){return new co(Z.create(this.#e,y(e)))}and(...e){return new mo(V.create(this.#e,y(e)))}$castTo(){return new r(this.#e)}$notNull(){return new r(this.#e)}toOperationNode(){return this.#e}},Er=class{#e;#r;constructor(e,t){this.#e=e,this.#r=t}get expression(){return this.#e}get alias(){return this.#r}toOperationNode(){return v.create(this.#e.toOperationNode(),C(this.#r)?this.#r.toOperationNode():c.create(this.#r))}},co=class r{#e;constructor(e){this.#e=e}get expressionType(){}as(e){return new Er(this,e)}or(...e){return new r(Z.create(this.#e,y(e)))}$castTo(){return new r(this.#e)}toOperationNode(){return ke.create(this.#e)}},mo=class r{#e;constructor(e){this.#e=e}get expressionType(){}as(e){return new Er(this,e)}and(...e){return new r(V.create(this.#e,y(e)))}$castTo(){return new r(this.#e)}toOperationNode(){return ke.create(this.#e)}};n();n();var yn={is(r){return r.kind==="FetchNode"},create(r,e){return{kind:"FetchNode",rowCount:k.create(r),modifier:e}}};function wn(r,e){if(!Fe(r)&&!Dr(r))throw new Error(`Invalid fetch row count: ${r}`);if(!ei(e))throw new Error(`Invalid fetch modifier: ${e}`);return yn.create(r,e)}function ei(r){return r==="only"||r==="with ties"}var ho=class r{#e;constructor(e){this.#e=o(e)}get expressionType(){}get isSelectQueryBuilder(){return!0}where(...e){return new r({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,y(e))})}whereRef(e,t,i){return new r({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,S(e,t,i))})}having(...e){return new r({...this.#e,queryNode:N.cloneWithHaving(this.#e.queryNode,y(e))})}havingRef(e,t,i){return new r({...this.#e,queryNode:N.cloneWithHaving(this.#e.queryNode,S(e,t,i))})}select(e){return new r({...this.#e,queryNode:N.cloneWithSelections(this.#e.queryNode,T(e))})}distinctOn(e){return new r({...this.#e,queryNode:N.cloneWithDistinctOn(this.#e.queryNode,fe(e))})}modifyFront(e){return new r({...this.#e,queryNode:N.cloneWithFrontModifier(this.#e.queryNode,ae.createWithExpression(e.toOperationNode()))})}modifyEnd(e){return new r({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,ae.createWithExpression(e.toOperationNode()))})}distinct(){return new r({...this.#e,queryNode:N.cloneWithFrontModifier(this.#e.queryNode,ae.create("Distinct"))})}forUpdate(e){return new r({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,ae.create("ForUpdate",e?wr(e).map(p):void 0))})}forShare(e){return new r({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,ae.create("ForShare",e?wr(e).map(p):void 0))})}forKeyShare(e){return new r({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,ae.create("ForKeyShare",e?wr(e).map(p):void 0))})}forNoKeyUpdate(e){return new r({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,ae.create("ForNoKeyUpdate",e?wr(e).map(p):void 0))})}skipLocked(){return new r({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,ae.create("SkipLocked"))})}noWait(){return new r({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,ae.create("NoWait"))})}selectAll(e){return new r({...this.#e,queryNode:N.cloneWithSelections(this.#e.queryNode,E(e))})}innerJoin(...e){return this.#r("InnerJoin",e)}leftJoin(...e){return this.#r("LeftJoin",e)}rightJoin(...e){return this.#r("RightJoin",e)}fullJoin(...e){return this.#r("FullJoin",e)}crossJoin(...e){return this.#r("CrossJoin",e)}innerJoinLateral(...e){return this.#r("LateralInnerJoin",e)}leftJoinLateral(...e){return this.#r("LateralLeftJoin",e)}crossJoinLateral(...e){return this.#r("LateralCrossJoin",e)}crossApply(...e){return this.#r("CrossApply",e)}outerApply(...e){return this.#r("OuterApply",e)}#r(e,t){return new r({...this.#e,queryNode:u.cloneWithJoin(this.#e.queryNode,Se(e,t))})}orderBy(...e){return new r({...this.#e,queryNode:u.cloneWithOrderByItems(this.#e.queryNode,K(e))})}groupBy(e){return new r({...this.#e,queryNode:N.cloneWithGroupByItems(this.#e.queryNode,fn(e))})}limit(e){return new r({...this.#e,queryNode:N.cloneWithLimit(this.#e.queryNode,Ge.create(x(e)))})}offset(e){return new r({...this.#e,queryNode:N.cloneWithOffset(this.#e.queryNode,ln.create(x(e)))})}fetch(e,t="only"){return new r({...this.#e,queryNode:N.cloneWithFetch(this.#e.queryNode,wn(e,t))})}top(e,t){return new r({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,oe(e,t))})}union(e){return new r({...this.#e,queryNode:N.cloneWithSetOperations(this.#e.queryNode,De("union",e,!1))})}unionAll(e){return new r({...this.#e,queryNode:N.cloneWithSetOperations(this.#e.queryNode,De("union",e,!0))})}intersect(e){return new r({...this.#e,queryNode:N.cloneWithSetOperations(this.#e.queryNode,De("intersect",e,!1))})}intersectAll(e){return new r({...this.#e,queryNode:N.cloneWithSetOperations(this.#e.queryNode,De("intersect",e,!0))})}except(e){return new r({...this.#e,queryNode:N.cloneWithSetOperations(this.#e.queryNode,De("except",e,!1))})}exceptAll(e){return new r({...this.#e,queryNode:N.cloneWithSetOperations(this.#e.queryNode,De("except",e,!0))})}as(e){return new lo(this,e)}clearSelect(){return new r({...this.#e,queryNode:N.cloneWithoutSelections(this.#e.queryNode)})}clearWhere(){return new r({...this.#e,queryNode:u.cloneWithoutWhere(this.#e.queryNode)})}clearLimit(){return new r({...this.#e,queryNode:N.cloneWithoutLimit(this.#e.queryNode)})}clearOffset(){return new r({...this.#e,queryNode:N.cloneWithoutOffset(this.#e.queryNode)})}clearOrderBy(){return new r({...this.#e,queryNode:u.cloneWithoutOrderBy(this.#e.queryNode)})}clearGroupBy(){return new r({...this.#e,queryNode:N.cloneWithoutGroupBy(this.#e.queryNode)})}$call(e){return e(this)}$if(e,t){return e?t(this):new r({...this.#e})}$castTo(){return new r(this.#e)}$narrowType(){return new r(this.#e)}$assertType(){return new r(this.#e)}$asTuple(){return new f(this.toOperationNode())}$asScalar(){return new f(this.toOperationNode())}withPlugin(e){return new r({...this.#e,executor:this.#e.executor.withPlugin(e)})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile();return(await this.#e.executor.executeQuery(e,this.#e.queryId)).rows}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=H){let t=await this.executeTakeFirst();if(t===void 0)throw ce(e)?new e(this.toOperationNode()):e(this.toOperationNode());return t}async*stream(e=100){let t=this.compile(),i=this.#e.executor.stream(t,e,this.#e.queryId);for await(let a of i)yield*a.rows}async explain(e,t){return await new r({...this.#e,queryNode:u.cloneWithExplain(this.#e.queryNode,e,t)}).execute()}};function Sr(r){return new ho(r)}var lo=class{#e;#r;constructor(e,t){this.#e=e,this.#r=t}get expression(){return this.#e}get alias(){return this.#r}get isAliasedSelectQueryBuilder(){return!0}toOperationNode(){return v.create(this.#e.toOperationNode(),c.create(this.#r))}};n();n();var me=o({is(r){return r.kind==="AggregateFunctionNode"},create(r,e=[]){return o({kind:"AggregateFunctionNode",func:r,aggregated:e})},cloneWithDistinct(r){return o({...r,distinct:!0})},cloneWithOrderBy(r,e,t=!1){let i=t?"withinGroup":"orderBy";return o({...r,[i]:r[i]?Ne.cloneWithItems(r[i],e):Ne.create(e)})},cloneWithFilter(r,e){return o({...r,filter:r.filter?I.cloneWithOperation(r.filter,"And",e):I.create(e)})},cloneWithOrFilter(r,e){return o({...r,filter:r.filter?I.cloneWithOperation(r.filter,"Or",e):I.create(e)})},cloneWithOver(r,e){return o({...r,over:e})}});n();var po=o({is(r){return r.kind==="FunctionNode"},create(r,e){return o({kind:"FunctionNode",func:r,arguments:e})}});n();var er=class r{#e;constructor(e){this.#e=o(e)}get expressionType(){}as(e){return new fo(this,e)}distinct(){return new r({...this.#e,aggregateFunctionNode:me.cloneWithDistinct(this.#e.aggregateFunctionNode)})}orderBy(...e){return new r({...this.#e,aggregateFunctionNode:u.cloneWithOrderByItems(this.#e.aggregateFunctionNode,K(e))})}clearOrderBy(){return new r({...this.#e,aggregateFunctionNode:u.cloneWithoutOrderBy(this.#e.aggregateFunctionNode)})}withinGroupOrderBy(...e){return new r({...this.#e,aggregateFunctionNode:me.cloneWithOrderBy(this.#e.aggregateFunctionNode,K(e),!0)})}filterWhere(...e){return new r({...this.#e,aggregateFunctionNode:me.cloneWithFilter(this.#e.aggregateFunctionNode,y(e))})}filterWhereRef(e,t,i){return new r({...this.#e,aggregateFunctionNode:me.cloneWithFilter(this.#e.aggregateFunctionNode,S(e,t,i))})}over(e){let t=hn();return new r({...this.#e,aggregateFunctionNode:me.cloneWithOver(this.#e.aggregateFunctionNode,(e?e(t):t).toOperationNode())})}$call(e){return e(this)}$castTo(){return new r(this.#e)}$notNull(){return new r(this.#e)}toOperationNode(){return this.#e.aggregateFunctionNode}},fo=class{#e;#r;constructor(e,t){this.#e=e,this.#r=t}get expression(){return this.#e}get alias(){return this.#r}toOperationNode(){return v.create(this.#e.toOperationNode(),c.create(this.#r))}};function ut(){let r=(t,i)=>new f(po.create(t,fe(i??[]))),e=(t,i)=>new er({aggregateFunctionNode:me.create(t,i?fe(i):void 0)});return Object.assign(r,{agg:e,avg(t){return e("avg",[t])},coalesce(...t){return r("coalesce",t)},count(t){return e("count",[t])},countAll(t){return new er({aggregateFunctionNode:me.create("count",E(t))})},max(t){return e("max",[t])},min(t){return e("min",[t])},sum(t){return e("sum",[t])},any(t){return r("any",[t])},jsonAgg(t){return new er({aggregateFunctionNode:me.create("json_agg",[g(t)?p(t):t.toOperationNode()])})},toJson(t){return new f(po.create("to_json",[g(t)?p(t):t.toOperationNode()]))}})}n();n();var xn=o({is(r){return r.kind==="UnaryOperationNode"},create(r,e){return o({kind:"UnaryOperationNode",operator:r,operand:e})}});function On(r,e){return xn.create(_.create(r),q(e))}n();n();var j=o({is(r){return r.kind==="CaseNode"},create(r){return o({kind:"CaseNode",value:r})},cloneWithWhen(r,e){return o({...r,when:o(r.when?[...r.when,e]:[e])})},cloneWithThen(r,e){return o({...r,when:r.when?o([...r.when.slice(0,-1),ye.cloneWithResult(r.when[r.when.length-1],e)]):void 0})},cloneWith(r,e){return o({...r,...e})}});var rr=class{#e;constructor(e){this.#e=o(e)}when(...e){return new dt({...this.#e,node:j.cloneWithWhen(this.#e.node,ye.create(y(e)))})}},dt=class{#e;constructor(e){this.#e=o(e)}then(e){return new No({...this.#e,node:j.cloneWithThen(this.#e.node,Ur(e)?Wr(e):x(e))})}},No=class{#e;constructor(e){this.#e=o(e)}when(...e){return new dt({...this.#e,node:j.cloneWithWhen(this.#e.node,ye.create(y(e)))})}else(e){return new yo({...this.#e,node:j.cloneWith(this.#e.node,{else:Ur(e)?Wr(e):x(e)})})}end(){return new f(j.cloneWith(this.#e.node,{isStatement:!1}))}endCase(){return new f(j.cloneWith(this.#e.node,{isStatement:!0}))}},yo=class{#e;constructor(e){this.#e=o(e)}end(){return new f(j.cloneWith(this.#e.node,{isStatement:!1}))}endCase(){return new f(j.cloneWith(this.#e.node,{isStatement:!0}))}};n();n();var wo=o({is(r){return r.kind==="JSONPathLegNode"},create(r,e){return o({kind:"JSONPathLegNode",type:r,value:e})}});var tr=class{#e;constructor(e){this.#e=e}at(e){return this.#r("ArrayLocation",e)}key(e){return this.#r("Member",e)}#r(e,t){return Ue.is(this.#e)?new ct(Ue.cloneWithTraversal(this.#e,be.is(this.#e.traversal)?be.cloneWithLeg(this.#e.traversal,wo.create(e,t)):zr.cloneWithValue(this.#e.traversal,k.createImmediate(t)))):new ct(be.cloneWithLeg(this.#e,wo.create(e,t)))}},ct=class r extends tr{#e;constructor(e){super(e),this.#e=e}get expressionType(){}as(e){return new xo(this,e)}$castTo(){return new r(this.#e)}$notNull(){return new r(this.#e)}toOperationNode(){return this.#e}},xo=class{#e;#r;constructor(e,t){this.#e=e,this.#r=t}get expression(){return this.#e}get alias(){return this.#r}toOperationNode(){return v.create(this.#e.toOperationNode(),C(this.#r)?this.#r.toOperationNode():c.create(this.#r))}};n();var Oo=o({is(r){return r.kind==="TupleNode"},create(r){return o({kind:"TupleNode",values:o(r)})}});n();n();var ri=["varchar","char","text","integer","int2","int4","int8","smallint","bigint","boolean","real","double precision","float4","float8","decimal","numeric","binary","bytea","date","datetime","time","timetz","timestamp","timestamptz","serial","bigserial","uuid","json","jsonb","blob","varbinary","int4range","int4multirange","int8range","int8multirange","numrange","nummultirange","tsrange","tsmultirange","tstzrange","tstzmultirange","daterange","datemultirange"],ti=[/^varchar\(\d+\)$/,/^char\(\d+\)$/,/^decimal\(\d+, \d+\)$/,/^numeric\(\d+, \d+\)$/,/^binary\(\d+\)$/,/^datetime\(\d+\)$/,/^time\(\d+\)$/,/^timetz\(\d+\)$/,/^timestamp\(\d+\)$/,/^timestamptz\(\d+\)$/,/^varbinary\(\d+\)$/],Wn=o({is(r){return r.kind==="DataTypeNode"},create(r){return o({kind:"DataTypeNode",dataType:r})}});function gn(r){return!!(ri.includes(r)||ti.some(e=>e.test(r)))}function ie(r){if(C(r))return r.toOperationNode();if(gn(r))return Wn.create(r);throw new Error(`invalid column data type ${JSON.stringify(r)}`)}n();var Cn=o({is(r){return r.kind==="CastNode"},create(r,e){return o({kind:"CastNode",expression:r,dataType:e})}});function at(r=Ze){function e(a,d,m){return new f(Jr(a,d,m))}function t(a,d){return new f(On(a,d))}let i=Object.assign(e,{fn:void 0,eb:void 0,selectFrom(a){return Sr({queryId:O(),executor:r,queryNode:N.createFrom(ne(a))})},case(a){return new rr({node:j.create(J(a)?void 0:q(a))})},ref(a,d){return J(d)?new f(re(a)):new tr(Jo(a,d))},jsonPath(){return new tr(be.create())},table(a){return new f(p(a))},val(a){return new f(x(a))},refTuple(...a){return new f(Oo.create(a.map(q)))},tuple(...a){return new f(Oo.create(a.map(x)))},lit(a){return new f(Wr(a))},unary:t,not(a){return t("not",a)},exists(a){return t("exists",a)},neg(a){return t("-",a)},between(a,d,m){return new f(Ce.create(q(a),_.create("between"),V.create(x(d),x(m))))},betweenSymmetric(a,d,m){return new f(Ce.create(q(a),_.create("between symmetric"),V.create(x(d),x(m))))},and(a){return Q(a)?new f($e(a,"and")):new f(Kt(a,"and"))},or(a){return Q(a)?new f($e(a,"or")):new f(Kt(a,"or"))},parens(...a){let d=y(a);return ke.is(d)?new f(d):new f(ke.create(d))},cast(a,d){return new f(Cn.create(q(a),ie(d)))},withSchema(a){return at(r.withPluginAtFront(new Y(a)))}});return i.fn=ut(),i.eb=i,i}function te(r){return at()}function U(r){if(C(r))return r.toOperationNode();if(W(r))return r(te()).toOperationNode();throw new Error(`invalid expression: ${JSON.stringify(r)}`)}function jr(r){if(C(r))return r.toOperationNode();if(W(r))return r(te()).toOperationNode();throw new Error(`invalid aliased expression: ${JSON.stringify(r)}`)}function pe(r){return Pr(r)||Lo(r)||W(r)}n();var mt=class{#e;get table(){return this.#e}constructor(e){this.#e=e}as(e){return new Wo(this.#e,e)}},Wo=class{#e;#r;get table(){return this.#e}get alias(){return this.#r}constructor(e,t){this.#e=e,this.#r=t}toOperationNode(){return v.create(p(this.#e),c.create(this.#r))}};function bn(r){return R(r)&&C(r)&&g(r.table)&&g(r.alias)}function ne(r){return Q(r)?r.map(e=>Be(e)):[Be(r)]}function Be(r){return g(r)?uo(r):bn(r)?r.toOperationNode():jr(r)}function uo(r){let e=" as ";if(r.includes(e)){let[t,i]=r.split(e).map(kn);return v.create(p(t),c.create(i))}else return p(r)}function p(r){let e=".";if(r.includes(e)){let[t,i]=r.split(e).map(kn);return $.createWithSchema(t,i)}else return $.create(r)}function kn(r){return r.trim()}n();n();var go=o({is(r){return r.kind==="AddColumnNode"},create(r){return o({kind:"AddColumnNode",column:r})}});n();var w=o({is(r){return r.kind==="ColumnDefinitionNode"},create(r,e){return o({kind:"ColumnDefinitionNode",column:h.create(r),dataType:e})},cloneWithFrontModifier(r,e){return o({...r,frontModifiers:r.frontModifiers?o([...r.frontModifiers,e]):[e]})},cloneWithEndModifier(r,e){return o({...r,endModifiers:r.endModifiers?o([...r.endModifiers,e]):[e]})},cloneWith(r,e){return o({...r,...e})}});n();var Co=o({is(r){return r.kind==="DropColumnNode"},create(r){return o({kind:"DropColumnNode",column:h.create(r)})}});n();var bo=o({is(r){return r.kind==="RenameColumnNode"},create(r,e){return o({kind:"RenameColumnNode",column:h.create(r),renameTo:h.create(e)})}});n();n();var or=o({is(r){return r.kind==="CheckConstraintNode"},create(r,e){return o({kind:"CheckConstraintNode",expression:r,name:e?c.create(e):void 0})}});n();var Tn=["no action","restrict","cascade","set null","set default"],nr=o({is(r){return r.kind==="ReferencesNode"},create(r,e){return o({kind:"ReferencesNode",table:r,columns:o([...e])})},cloneWithOnDelete(r,e){return o({...r,onDelete:e})},cloneWithOnUpdate(r,e){return o({...r,onUpdate:e})}});n();function ht(r){return C(r)?r.toOperationNode():k.createImmediate(r)}n();var Ar=o({is(r){return r.kind==="GeneratedNode"},create(r){return o({kind:"GeneratedNode",...r})},createWithExpression(r){return o({kind:"GeneratedNode",always:!0,expression:r})},cloneWith(r,e){return o({...r,...e})}});n();var Sn=o({is(r){return r.kind==="DefaultValueNode"},create(r){return o({kind:"DefaultValueNode",defaultValue:r})}});n();function ir(r){if(Tn.includes(r))return r;throw new Error(`invalid OnModifyForeignAction ${r}`)}var we=class r{#e;constructor(e){this.#e=e}autoIncrement(){return new r(w.cloneWith(this.#e,{autoIncrement:!0}))}identity(){return new r(w.cloneWith(this.#e,{identity:!0}))}primaryKey(){return new r(w.cloneWith(this.#e,{primaryKey:!0}))}references(e){let t=re(e);if(!t.table||Me.is(t.column))throw new Error(`invalid call references('${e}'). The reference must have format table.column or schema.table.column`);return new r(w.cloneWith(this.#e,{references:nr.create(t.table,[t.column])}))}onDelete(e){if(!this.#e.references)throw new Error("on delete constraint can only be added for foreign keys");return new r(w.cloneWith(this.#e,{references:nr.cloneWithOnDelete(this.#e.references,ir(e))}))}onUpdate(e){if(!this.#e.references)throw new Error("on update constraint can only be added for foreign keys");return new r(w.cloneWith(this.#e,{references:nr.cloneWithOnUpdate(this.#e.references,ir(e))}))}unique(){return new r(w.cloneWith(this.#e,{unique:!0}))}notNull(){return new r(w.cloneWith(this.#e,{notNull:!0}))}unsigned(){return new r(w.cloneWith(this.#e,{unsigned:!0}))}defaultTo(e){return new r(w.cloneWith(this.#e,{defaultTo:Sn.create(ht(e))}))}check(e){return new r(w.cloneWith(this.#e,{check:or.create(e.toOperationNode())}))}generatedAlwaysAs(e){return new r(w.cloneWith(this.#e,{generated:Ar.createWithExpression(e.toOperationNode())}))}generatedAlwaysAsIdentity(){return new r(w.cloneWith(this.#e,{generated:Ar.create({identity:!0,always:!0})}))}generatedByDefaultAsIdentity(){return new r(w.cloneWith(this.#e,{generated:Ar.create({identity:!0,byDefault:!0})}))}stored(){if(!this.#e.generated)throw new Error("stored() can only be called after generatedAlwaysAs");return new r(w.cloneWith(this.#e,{generated:Ar.cloneWith(this.#e.generated,{stored:!0})}))}modifyFront(e){return new r(w.cloneWithFrontModifier(this.#e,e.toOperationNode()))}nullsNotDistinct(){return new r(w.cloneWith(this.#e,{nullsNotDistinct:!0}))}ifNotExists(){return new r(w.cloneWith(this.#e,{ifNotExists:!0}))}modifyEnd(e){return new r(w.cloneWithEndModifier(this.#e,e.toOperationNode()))}$call(e){return e(this)}toOperationNode(){return this.#e}};n();var ko=o({is(r){return r.kind==="ModifyColumnNode"},create(r){return o({kind:"ModifyColumnNode",column:r})}});n();n();var se=o({is(r){return r.kind==="ForeignKeyConstraintNode"},create(r,e,t,i){return o({kind:"ForeignKeyConstraintNode",columns:r,references:nr.create(e,t),name:i?c.create(i):void 0})},cloneWith(r,e){return o({...r,...e})}});var sr=class r{#e;constructor(e){this.#e=e}onDelete(e){return new r(se.cloneWith(this.#e,{onDelete:ir(e)}))}onUpdate(e){return new r(se.cloneWith(this.#e,{onUpdate:ir(e)}))}deferrable(){return new r(se.cloneWith(this.#e,{deferrable:!0}))}notDeferrable(){return new r(se.cloneWith(this.#e,{deferrable:!1}))}initiallyDeferred(){return new r(se.cloneWith(this.#e,{initiallyDeferred:!0}))}initiallyImmediate(){return new r(se.cloneWith(this.#e,{initiallyDeferred:!1}))}$call(e){return e(this)}toOperationNode(){return this.#e}};n();var ar=o({is(r){return r.kind==="AddConstraintNode"},create(r){return o({kind:"AddConstraintNode",constraint:r})}});n();var he=o({is(r){return r.kind==="UniqueConstraintNode"},create(r,e,t){return o({kind:"UniqueConstraintNode",columns:o(r.map(h.create)),name:e?c.create(e):void 0,nullsNotDistinct:t})},cloneWith(r,e){return o({...r,...e})}});n();var ur=o({is(r){return r.kind==="DropConstraintNode"},create(r){return o({kind:"DropConstraintNode",constraintName:c.create(r)})},cloneWith(r,e){return o({...r,...e})}});n();n();var dr=o({is(r){return r.kind==="AlterColumnNode"},create(r,e,t){return o({kind:"AlterColumnNode",column:h.create(r),[e]:t})}});var Rr=class{#e;constructor(e){this.#e=e}setDataType(e){return new Qe(dr.create(this.#e,"dataType",ie(e)))}setDefault(e){return new Qe(dr.create(this.#e,"setDefault",ht(e)))}dropDefault(){return new Qe(dr.create(this.#e,"dropDefault",!0))}setNotNull(){return new Qe(dr.create(this.#e,"setNotNull",!0))}dropNotNull(){return new Qe(dr.create(this.#e,"dropNotNull",!0))}$call(e){return e(this)}},Qe=class{#e;constructor(e){this.#e=e}toOperationNode(){return this.#e}};n();var xe=class{#e;constructor(e){this.#e=o(e)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};n();var lt=class r{#e;constructor(e){this.#e=o(e)}onDelete(e){return new r({...this.#e,constraintBuilder:this.#e.constraintBuilder.onDelete(e)})}onUpdate(e){return new r({...this.#e,constraintBuilder:this.#e.constraintBuilder.onUpdate(e)})}deferrable(){return new r({...this.#e,constraintBuilder:this.#e.constraintBuilder.deferrable()})}notDeferrable(){return new r({...this.#e,constraintBuilder:this.#e.constraintBuilder.notDeferrable()})}initiallyDeferred(){return new r({...this.#e,constraintBuilder:this.#e.constraintBuilder.initiallyDeferred()})}initiallyImmediate(){return new r({...this.#e,constraintBuilder:this.#e.constraintBuilder.initiallyImmediate()})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(l.cloneWithTableProps(this.#e.node,{addConstraint:ar.create(this.#e.constraintBuilder.toOperationNode())}),this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};n();var qr=class r{#e;constructor(e){this.#e=o(e)}ifExists(){return new r({...this.#e,node:l.cloneWithTableProps(this.#e.node,{dropConstraint:ur.cloneWith(this.#e.node.dropConstraint,{ifExists:!0})})})}cascade(){return new r({...this.#e,node:l.cloneWithTableProps(this.#e.node,{dropConstraint:ur.cloneWith(this.#e.node.dropConstraint,{modifier:"cascade"})})})}restrict(){return new r({...this.#e,node:l.cloneWithTableProps(this.#e.node,{dropConstraint:ur.cloneWith(this.#e.node.dropConstraint,{modifier:"restrict"})})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};n();var Oe=o({is(r){return r.kind==="PrimaryKeyConstraintNode"},create(r,e){return o({kind:"PrimaryKeyConstraintNode",columns:o(r.map(h.create)),name:e?c.create(e):void 0})},cloneWith(r,e){return o({...r,...e})}});n();var Re=o({is(r){return r.kind==="AddIndexNode"},create(r){return o({kind:"AddIndexNode",name:c.create(r)})},cloneWith(r,e){return o({...r,...e})},cloneWithColumns(r,e){return o({...r,columns:[...r.columns||[],...e]})}});n();var pt=class r{#e;constructor(e){this.#e=o(e)}unique(){return new r({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addIndex:Re.cloneWith(this.#e.node.addIndex,{unique:!0})})})}column(e){return new r({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addIndex:Re.cloneWithColumns(this.#e.node.addIndex,[Je(e)])})})}columns(e){return new r({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addIndex:Re.cloneWithColumns(this.#e.node.addIndex,e.map(Je))})})}expression(e){return new r({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addIndex:Re.cloneWithColumns(this.#e.node.addIndex,[e.toOperationNode()])})})}using(e){return new r({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addIndex:Re.cloneWith(this.#e.node.addIndex,{using:L.createWithSql(e)})})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};n();var cr=class r{#e;constructor(e){this.#e=e}nullsNotDistinct(){return new r(he.cloneWith(this.#e,{nullsNotDistinct:!0}))}deferrable(){return new r(he.cloneWith(this.#e,{deferrable:!0}))}notDeferrable(){return new r(he.cloneWith(this.#e,{deferrable:!1}))}initiallyDeferred(){return new r(he.cloneWith(this.#e,{initiallyDeferred:!0}))}initiallyImmediate(){return new r(he.cloneWith(this.#e,{initiallyDeferred:!1}))}$call(e){return e(this)}toOperationNode(){return this.#e}};n();var mr=class r{#e;constructor(e){this.#e=e}deferrable(){return new r(Oe.cloneWith(this.#e,{deferrable:!0}))}notDeferrable(){return new r(Oe.cloneWith(this.#e,{deferrable:!1}))}initiallyDeferred(){return new r(Oe.cloneWith(this.#e,{initiallyDeferred:!0}))}initiallyImmediate(){return new r(Oe.cloneWith(this.#e,{initiallyDeferred:!1}))}$call(e){return e(this)}toOperationNode(){return this.#e}};n();var hr=class{#e;constructor(e){this.#e=e}$call(e){return e(this)}toOperationNode(){return this.#e}};n();var En=o({is(r){return r.kind==="RenameConstraintNode"},create(r,e){return o({kind:"RenameConstraintNode",oldName:c.create(r),newName:c.create(e)})}});var ft=class{#e;constructor(e){this.#e=o(e)}renameTo(e){return new xe({...this.#e,node:l.cloneWithTableProps(this.#e.node,{renameTo:p(e)})})}setSchema(e){return new xe({...this.#e,node:l.cloneWithTableProps(this.#e.node,{setSchema:c.create(e)})})}alterColumn(e,t){let i=t(new Rr(e));return new Pe({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,i.toOperationNode())})}dropColumn(e){return new Pe({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,Co.create(e))})}renameColumn(e,t){return new Pe({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,bo.create(e,t))})}addColumn(e,t,i=F){let a=i(new we(w.create(e,ie(t))));return new Pe({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,go.create(a.toOperationNode()))})}modifyColumn(e,t,i=F){let a=i(new we(w.create(e,ie(t))));return new Pe({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,ko.create(a.toOperationNode()))})}addUniqueConstraint(e,t,i=F){let a=i(new cr(he.create(t,e)));return new xe({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addConstraint:ar.create(a.toOperationNode())})})}addCheckConstraint(e,t,i=F){let a=i(new hr(or.create(t.toOperationNode(),e)));return new xe({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addConstraint:ar.create(a.toOperationNode())})})}addForeignKeyConstraint(e,t,i,a,d=F){let m=d(new sr(se.create(t.map(h.create),p(i),a.map(h.create),e)));return new lt({...this.#e,constraintBuilder:m})}addPrimaryKeyConstraint(e,t,i=F){let a=i(new mr(Oe.create(t,e)));return new xe({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addConstraint:ar.create(a.toOperationNode())})})}dropConstraint(e){return new qr({...this.#e,node:l.cloneWithTableProps(this.#e.node,{dropConstraint:ur.create(e)})})}renameConstraint(e,t){return new qr({...this.#e,node:l.cloneWithTableProps(this.#e.node,{renameConstraint:En.create(e,t)})})}addIndex(e){return new pt({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addIndex:Re.create(e)})})}dropIndex(e){return new xe({...this.#e,node:l.cloneWithTableProps(this.#e.node,{dropIndex:ge.create(e)})})}$call(e){return e(this)}},Pe=class r{#e;constructor(e){this.#e=o(e)}alterColumn(e,t){let i=t(new Rr(e));return new r({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,i.toOperationNode())})}dropColumn(e){return new r({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,Co.create(e))})}renameColumn(e,t){return new r({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,bo.create(e,t))})}addColumn(e,t,i=F){let a=i(new we(w.create(e,ie(t))));return new r({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,go.create(a.toOperationNode()))})}modifyColumn(e,t,i=F){let a=i(new we(w.create(e,ie(t))));return new r({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,ko.create(a.toOperationNode()))})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};n();n();var lr=class extends Ee{transformPrimitiveValueList(e){return ue.create(e.values.map(k.createImmediate))}transformValue(e){return k.createImmediate(e.value)}};var Nt=class r{#e;constructor(e){this.#e=o(e)}ifNotExists(){return new r({...this.#e,node:X.cloneWith(this.#e.node,{ifNotExists:!0})})}unique(){return new r({...this.#e,node:X.cloneWith(this.#e.node,{unique:!0})})}nullsNotDistinct(){return new r({...this.#e,node:X.cloneWith(this.#e.node,{nullsNotDistinct:!0})})}on(e){return new r({...this.#e,node:X.cloneWith(this.#e.node,{table:p(e)})})}column(e){return new r({...this.#e,node:X.cloneWithColumns(this.#e.node,[Je(e)])})}columns(e){return new r({...this.#e,node:X.cloneWithColumns(this.#e.node,e.map(Je))})}expression(e){return new r({...this.#e,node:X.cloneWithColumns(this.#e.node,[e.toOperationNode()])})}using(e){return new r({...this.#e,node:X.cloneWith(this.#e.node,{using:L.createWithSql(e)})})}where(...e){let t=new lr;return new r({...this.#e,node:u.cloneWithWhere(this.#e.node,t.transformNode(y(e),this.#e.queryId))})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};n();var yt=class r{#e;constructor(e){this.#e=o(e)}ifNotExists(){return new r({...this.#e,node:Qr.cloneWith(this.#e.node,{ifNotExists:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};n();n();function An(r){if(vo.includes(r))return r;throw new Error(`invalid OnCommitAction ${r}`)}var wt=class r{#e;constructor(e){this.#e=o(e)}temporary(){return new r({...this.#e,node:z.cloneWith(this.#e.node,{temporary:!0})})}onCommit(e){return new r({...this.#e,node:z.cloneWith(this.#e.node,{onCommit:An(e)})})}ifNotExists(){return new r({...this.#e,node:z.cloneWith(this.#e.node,{ifNotExists:!0})})}addColumn(e,t,i=F){let a=i(new we(w.create(e,ie(t))));return new r({...this.#e,node:z.cloneWithColumn(this.#e.node,a.toOperationNode())})}addPrimaryKeyConstraint(e,t,i=F){let a=i(new mr(Oe.create(t,e)));return new r({...this.#e,node:z.cloneWithConstraint(this.#e.node,a.toOperationNode())})}addUniqueConstraint(e,t,i=F){let a=i(new cr(he.create(t,e)));return new r({...this.#e,node:z.cloneWithConstraint(this.#e.node,a.toOperationNode())})}addCheckConstraint(e,t,i=F){let a=i(new hr(or.create(t.toOperationNode(),e)));return new r({...this.#e,node:z.cloneWithConstraint(this.#e.node,a.toOperationNode())})}addForeignKeyConstraint(e,t,i,a,d=F){let m=d(new sr(se.create(t.map(h.create),p(i),a.map(h.create),e)));return new r({...this.#e,node:z.cloneWithConstraint(this.#e.node,m.toOperationNode())})}modifyFront(e){return new r({...this.#e,node:z.cloneWithFrontModifier(this.#e.node,e.toOperationNode())})}modifyEnd(e){return new r({...this.#e,node:z.cloneWithEndModifier(this.#e.node,e.toOperationNode())})}as(e){return new r({...this.#e,node:z.cloneWith(this.#e.node,{selectQuery:U(e)})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};n();var xt=class r{#e;constructor(e){this.#e=o(e)}on(e){return new r({...this.#e,node:ge.cloneWith(this.#e.node,{table:p(e)})})}ifExists(){return new r({...this.#e,node:ge.cloneWith(this.#e.node,{ifExists:!0})})}cascade(){return new r({...this.#e,node:ge.cloneWith(this.#e.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};n();var Ot=class r{#e;constructor(e){this.#e=o(e)}ifExists(){return new r({...this.#e,node:xr.cloneWith(this.#e.node,{ifExists:!0})})}cascade(){return new r({...this.#e,node:xr.cloneWith(this.#e.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};n();var Wt=class r{#e;constructor(e){this.#e=o(e)}ifExists(){return new r({...this.#e,node:Or.cloneWith(this.#e.node,{ifExists:!0})})}cascade(){return new r({...this.#e,node:Or.cloneWith(this.#e.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};n();n();var We=o({is(r){return r.kind==="CreateViewNode"},create(r){return o({kind:"CreateViewNode",name:P.create(r)})},cloneWith(r,e){return o({...r,...e})}});n();var gt=class{#e=new lr;transformQuery(e){return this.#e.transformNode(e.node,e.queryId)}transformResult(e){return Promise.resolve(e.result)}};var Ct=class r{#e;constructor(e){this.#e=o(e)}temporary(){return new r({...this.#e,node:We.cloneWith(this.#e.node,{temporary:!0})})}materialized(){return new r({...this.#e,node:We.cloneWith(this.#e.node,{materialized:!0})})}ifNotExists(){return new r({...this.#e,node:We.cloneWith(this.#e.node,{ifNotExists:!0})})}orReplace(){return new r({...this.#e,node:We.cloneWith(this.#e.node,{orReplace:!0})})}columns(e){return new r({...this.#e,node:We.cloneWith(this.#e.node,{columns:e.map(Ut)})})}as(e){let t=e.withPlugin(new gt).toOperationNode();return new r({...this.#e,node:We.cloneWith(this.#e.node,{as:t})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};n();n();var pr=o({is(r){return r.kind==="DropViewNode"},create(r){return o({kind:"DropViewNode",name:P.create(r)})},cloneWith(r,e){return o({...r,...e})}});var bt=class r{#e;constructor(e){this.#e=o(e)}materialized(){return new r({...this.#e,node:pr.cloneWith(this.#e.node,{materialized:!0})})}ifExists(){return new r({...this.#e,node:pr.cloneWith(this.#e.node,{ifExists:!0})})}cascade(){return new r({...this.#e,node:pr.cloneWith(this.#e.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};n();n();var kt=o({is(r){return r.kind==="CreateTypeNode"},create(r){return o({kind:"CreateTypeNode",name:r})},cloneWithEnum(r,e){return o({...r,enum:ue.create(e.map(k.createImmediate))})}});var Tt=class r{#e;constructor(e){this.#e=o(e)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}asEnum(e){return new r({...this.#e,node:kt.cloneWithEnum(this.#e.node,e)})}$call(e){return e(this)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};n();n();var St=o({is(r){return r.kind==="DropTypeNode"},create(r){return o({kind:"DropTypeNode",name:r})},cloneWith(r,e){return o({...r,...e})}});var Et=class r{#e;constructor(e){this.#e=o(e)}ifExists(){return new r({...this.#e,node:St.cloneWith(this.#e.node,{ifExists:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};n();function To(r){let e=".";if(r.includes(e)){let t=r.split(e).map(oi);if(t.length===2)return P.createWithSchema(t[0],t[1]);throw new Error(`invalid schemable identifier ${r}`)}else return P.create(r)}function oi(r){return r.trim()}n();n();var fr=o({is(r){return r.kind==="RefreshMaterializedViewNode"},create(r){return o({kind:"RefreshMaterializedViewNode",name:P.create(r)})},cloneWith(r,e){return o({...r,...e})}});var At=class r{#e;constructor(e){this.#e=o(e)}concurrently(){return new r({...this.#e,node:fr.cloneWith(this.#e.node,{concurrently:!0,withNoData:!1})})}withData(){return new r({...this.#e,node:fr.cloneWith(this.#e.node,{withNoData:!1})})}withNoData(){return new r({...this.#e,node:fr.cloneWith(this.#e.node,{withNoData:!0,concurrently:!1})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var Rt=class r{#e;constructor(e){this.#e=e}createTable(e){return new wt({queryId:O(),executor:this.#e,node:z.create(p(e))})}dropTable(e){return new Wt({queryId:O(),executor:this.#e,node:Or.create(p(e))})}createIndex(e){return new Nt({queryId:O(),executor:this.#e,node:X.create(e)})}dropIndex(e){return new xt({queryId:O(),executor:this.#e,node:ge.create(e)})}createSchema(e){return new yt({queryId:O(),executor:this.#e,node:Qr.create(e)})}dropSchema(e){return new Ot({queryId:O(),executor:this.#e,node:xr.create(e)})}alterTable(e){return new ft({queryId:O(),executor:this.#e,node:l.create(p(e))})}createView(e){return new Ct({queryId:O(),executor:this.#e,node:We.create(e)})}refreshMaterializedView(e){return new At({queryId:O(),executor:this.#e,node:fr.create(e)})}dropView(e){return new bt({queryId:O(),executor:this.#e,node:pr.create(e)})}createType(e){return new Tt({queryId:O(),executor:this.#e,node:kt.create(To(e))})}dropType(e){return new Et({queryId:O(),executor:this.#e,node:St.create(To(e))})}withPlugin(e){return new r(this.#e.withPlugin(e))}withoutPlugins(){return new r(this.#e.withoutPlugins())}withSchema(e){return new r(this.#e.withPluginAtFront(new Y(e)))}};n();var qt=class{ref(e){return new Lr(e)}table(e){return new mt(e)}};n();var It=class{#e;constructor(e){this.#e=e}async provideConnection(e){let t=await this.#e.acquireConnection();try{return await e(t)}finally{await this.#e.releaseConnection(t)}}};n();var Bt=class r extends Xe{#e;#r;#t;constructor(e,t,i,a=[]){super(a),this.#e=e,this.#r=t,this.#t=i}get adapter(){return this.#r}compileQuery(e,t){return this.#e.compileQuery(e,t)}provideConnection(e){return this.#t.provideConnection(e)}withPlugins(e){return new r(this.#e,this.#r,this.#t,[...this.plugins,...e])}withPlugin(e){return new r(this.#e,this.#r,this.#t,[...this.plugins,e])}withPluginAtFront(e){return new r(this.#e,this.#r,this.#t,[e,...this.plugins])}withConnectionProvider(e){return new r(this.#e,this.#r,e,[...this.plugins])}withoutPlugins(){return new r(this.#e,this.#r,this.#t,[])}};n();n();function Dt(){return typeof performance<"u"&&W(performance.now)?performance.now():Date.now()}var Qt=class{#e;#r;#t;#i;#o;#a=new WeakSet;constructor(e,t){this.#i=!1,this.#e=e,this.#r=t}async init(){if(this.#o)throw new Error("driver has already been destroyed");this.#t||(this.#t=this.#e.init().then(()=>{this.#i=!0}).catch(e=>(this.#t=void 0,Promise.reject(e)))),await this.#t}async acquireConnection(){if(this.#o)throw new Error("driver has already been destroyed");this.#i||await this.init();let e=await this.#e.acquireConnection();return this.#a.has(e)||(this.#d()&&this.#n(e),this.#a.add(e)),e}async releaseConnection(e){await this.#e.releaseConnection(e)}beginTransaction(e,t){return this.#e.beginTransaction(e,t)}commitTransaction(e){return this.#e.commitTransaction(e)}rollbackTransaction(e){return this.#e.rollbackTransaction(e)}savepoint(e,t,i){if(this.#e.savepoint)return this.#e.savepoint(e,t,i);throw new Error("The `savepoint` method is not supported by this driver")}rollbackToSavepoint(e,t,i){if(this.#e.rollbackToSavepoint)return this.#e.rollbackToSavepoint(e,t,i);throw new Error("The `rollbackToSavepoint` method is not supported by this driver")}releaseSavepoint(e,t,i){if(this.#e.releaseSavepoint)return this.#e.releaseSavepoint(e,t,i);throw new Error("The `releaseSavepoint` method is not supported by this driver")}async destroy(){this.#t&&(await this.#t,this.#o||(this.#o=this.#e.destroy().catch(e=>(this.#o=void 0,Promise.reject(e)))),await this.#o)}#d(){return this.#r.isLevelEnabled("query")||this.#r.isLevelEnabled("error")}#n(e){let t=e.executeQuery,i=e.streamQuery,a=this;e.executeQuery=async d=>{let m,A=Dt();try{return await t.call(e,d)}catch(B){throw m=B,await a.#s(B,d,A),B}finally{m||await a.#u(d,A)}},e.streamQuery=async function*(d,m){let A,B=Dt();try{for await(let D of i.call(e,d,m))yield D}catch(D){throw A=D,await a.#s(D,d,B),D}finally{A||await a.#u(d,B,!0)}}}async#s(e,t,i){await this.#r.error(()=>({level:"error",error:e,query:t,queryDurationMillis:this.#c(i)}))}async#u(e,t,i=!1){await this.#r.query(()=>({level:"query",isStream:i,query:e,queryDurationMillis:this.#c(t)}))}#c(e){return Dt()-e}};n();var ni=()=>{},Nr=class{#e;#r;constructor(e){this.#e=e}async provideConnection(e){for(;this.#r;)await this.#r.catch(ni);return this.#r=this.#t(e).finally(()=>{this.#r=void 0}),this.#r}async#t(e){return await e(this.#e)}};n();var ii=["read only","read write"],si=["read uncommitted","read committed","repeatable read","serializable","snapshot"];function So(r){if(r.accessMode&&!ii.includes(r.accessMode))throw new Error(`invalid transaction access mode ${r.accessMode}`);if(r.isolationLevel&&!si.includes(r.isolationLevel))throw new Error(`invalid transaction isolation level ${r.isolationLevel}`)}n();var JC=o(["query","error"]),Pt=class{#e;#r;constructor(e){W(e)?(this.#r=e,this.#e=o({query:!0,error:!0})):(this.#r=ai,this.#e=o({query:e.includes("query"),error:e.includes("error")}))}isLevelEnabled(e){return this.#e[e]}async query(e){this.#e.query&&await this.#r(e())}async error(e){this.#e.error&&await this.#r(e())}};function ai(r){if(r.level==="query"){let e=`kysely:query:${r.isStream?"stream:":""}`;console.log(`${e} ${r.query.sql}`),console.log(`${e} duration: ${r.queryDurationMillis.toFixed(1)}ms`)}else r.level==="error"&&(r.error instanceof Error?console.error(`kysely:error: ${r.error.stack??r.error.message}`):console.error(`kysely:error: ${JSON.stringify({error:r.error,query:r.query.sql,queryDurationMillis:r.queryDurationMillis})}`))}n();function Rn(r){return R(r)&&W(r.compile)}Symbol.asyncDispose??=Symbol("Symbol.asyncDispose");var yr=class r extends _e{#e;constructor(e){let t,i;if(ui(e))t={executor:e.executor},i={...e};else{let a=e.dialect,d=a.createDriver(),m=a.createQueryCompiler(),A=a.createAdapter(),B=new Pt(e.log??[]),D=new Qt(d,B),qn=new It(D),Po=new Bt(m,A,qn,e.plugins??[]);t={executor:Po},i={config:e,executor:Po,dialect:a,driver:D}}super(t),this.#e=o(i)}get schema(){return new Rt(this.#e.executor)}get dynamic(){return new qt}get introspection(){return this.#e.dialect.createIntrospector(this.withoutPlugins())}case(e){return new rr({node:j.create(J(e)?void 0:U(e))})}get fn(){return ut()}transaction(){return new Ao({...this.#e})}startTransaction(){return new Ro({...this.#e})}connection(){return new Eo({...this.#e})}withPlugin(e){return new r({...this.#e,executor:this.#e.executor.withPlugin(e)})}withoutPlugins(){return new r({...this.#e,executor:this.#e.executor.withoutPlugins()})}withSchema(e){return new r({...this.#e,executor:this.#e.executor.withPluginAtFront(new Y(e))})}withTables(){return new r({...this.#e})}async destroy(){await this.#e.driver.destroy()}get isTransaction(){return!1}getExecutor(){return this.#e.executor}executeQuery(e,t=O()){let i=Rn(e)?e.compile():e;return this.getExecutor().executeQuery(i,t)}async[Symbol.asyncDispose](){await this.destroy()}},vt=class r extends yr{#e;constructor(e){super(e),this.#e=e}get isTransaction(){return!0}transaction(){throw new Error("calling the transaction method for a Transaction is not supported")}connection(){throw new Error("calling the connection method for a Transaction is not supported")}async destroy(){throw new Error("calling the destroy method for a Transaction is not supported")}withPlugin(e){return new r({...this.#e,executor:this.#e.executor.withPlugin(e)})}withoutPlugins(){return new r({...this.#e,executor:this.#e.executor.withoutPlugins()})}withSchema(e){return new r({...this.#e,executor:this.#e.executor.withPluginAtFront(new Y(e))})}withTables(){return new r({...this.#e})}};function ui(r){return R(r)&&R(r.config)&&R(r.driver)&&R(r.executor)&&R(r.dialect)}var Eo=class{#e;constructor(e){this.#e=o(e)}async execute(e){return this.#e.executor.provideConnection(async t=>{let i=this.#e.executor.withConnectionProvider(new Nr(t)),a=new yr({...this.#e,executor:i});return await e(a)})}},Ao=class r{#e;constructor(e){this.#e=o(e)}setAccessMode(e){return new r({...this.#e,accessMode:e})}setIsolationLevel(e){return new r({...this.#e,isolationLevel:e})}async execute(e){let{isolationLevel:t,accessMode:i,...a}=this.#e,d={isolationLevel:t,accessMode:i};return So(d),this.#e.executor.provideConnection(async m=>{let A=this.#e.executor.withConnectionProvider(new Nr(m)),B=new vt({...a,executor:A});try{await this.#e.driver.beginTransaction(m,d);let D=await e(B);return await this.#e.driver.commitTransaction(m),D}catch(D){throw await this.#e.driver.rollbackTransaction(m),D}})}},Ro=class r{#e;constructor(e){this.#e=o(e)}setAccessMode(e){return new r({...this.#e,accessMode:e})}setIsolationLevel(e){return new r({...this.#e,isolationLevel:e})}async execute(){let{isolationLevel:e,accessMode:t,...i}=this.#e,a={isolationLevel:e,accessMode:t};So(a);let d=await ot(this.#e.executor);return await this.#e.driver.beginTransaction(d.connection,a),new qo({...i,connection:d,executor:this.#e.executor.withConnectionProvider(new Nr(d.connection))})}},qo=class r extends vt{#e;#r;#t;constructor(e){let t={isCommitted:!1,isRolledBack:!1};e={...e,executor:new Io(e.executor,t)};let{connection:i,...a}=e;super(a),this.#e=o(e),this.#t=t;let d=O();this.#r=m=>e.executor.compileQuery(m,d)}get isCommitted(){return this.#t.isCommitted}get isRolledBack(){return this.#t.isRolledBack}commit(){return Le(this.#t),new ve(async()=>{await this.#e.driver.commitTransaction(this.#e.connection.connection),this.#t.isCommitted=!0,this.#e.connection.release()})}rollback(){return Le(this.#t),new ve(async()=>{await this.#e.driver.rollbackTransaction(this.#e.connection.connection),this.#t.isRolledBack=!0,this.#e.connection.release()})}savepoint(e){return Le(this.#t),new ve(async()=>(await this.#e.driver.savepoint?.(this.#e.connection.connection,e,this.#r),new r({...this.#e})))}rollbackToSavepoint(e){return Le(this.#t),new ve(async()=>(await this.#e.driver.rollbackToSavepoint?.(this.#e.connection.connection,e,this.#r),new r({...this.#e})))}releaseSavepoint(e){return Le(this.#t),new ve(async()=>(await this.#e.driver.releaseSavepoint?.(this.#e.connection.connection,e,this.#r),new r({...this.#e})))}withPlugin(e){return new r({...this.#e,executor:this.#e.executor.withPlugin(e)})}withoutPlugins(){return new r({...this.#e,executor:this.#e.executor.withoutPlugins()})}withSchema(e){return new r({...this.#e,executor:this.#e.executor.withPluginAtFront(new Y(e))})}withTables(){return new r({...this.#e})}},ve=class{#e;constructor(e){this.#e=e}async execute(){return await this.#e()}};function Le(r){if(r.isCommitted)throw new Error("Transaction is already committed");if(r.isRolledBack)throw new Error("Transaction is already rolled back")}var Io=class r{#e;#r;constructor(e,t){e instanceof r?this.#e=e.#e:this.#e=e,this.#r=t}get adapter(){return this.#e.adapter}get plugins(){return this.#e.plugins}transformQuery(e,t){return this.#e.transformQuery(e,t)}compileQuery(e,t){return this.#e.compileQuery(e,t)}provideConnection(e){return this.#e.provideConnection(e)}executeQuery(e,t){return Le(this.#r),this.#e.executeQuery(e,t)}stream(e,t,i){return Le(this.#r),this.#e.stream(e,t,i)}withConnectionProvider(e){return new r(this.#e.withConnectionProvider(e),this.#r)}withPlugin(e){return new r(this.#e.withPlugin(e),this.#r)}withPlugins(e){return new r(this.#e.withPlugins(e),this.#r)}withPluginAtFront(e){return new r(this.#e.withPluginAtFront(e),this.#r)}withoutPlugins(){return new r(this.#e.withoutPlugins(),this.#r)}};n();var Lt=class{async init(){}async acquireConnection(){return new Bo}async beginTransaction(){}async commitTransaction(){}async rollbackTransaction(){}async releaseConnection(){}async destroy(){}async releaseSavepoint(){}async rollbackToSavepoint(){}async savepoint(){}},Bo=class{async executeQuery(){return{rows:[]}}async*streamQuery(){}};function xb(r){return new yr({dialect:{createAdapter:()=>new r.Adapter,createDriver:()=>new Lt,createIntrospector:()=>null,createQueryCompiler:()=>new r.QueryCompiler},plugins:[...r.noParameters?[new Do]:[]]})}var Do=class{#e=new Qo;transformQuery(e){return this.#e.transformNode(e.node)}transformResult(e){return Promise.resolve(e.result)}},Qo=class extends Ee{transformPrimitiveValueList(e){return ue.create(e.values.map(k.createImmediate))}transformValue(e){return{...super.transformValue(e),immediate:!0}}};function Ob(r){let e=r.compile();return{parameters:e.parameters,sql:e.sql}}function Wb(r,e){let t=ci(r,e);return i=>i.where(a=>a.or(t.map(d=>a.and(d.map(([m,A])=>a(m,A===null?"is":"=",A))))))}function di(r,e){return Object.entries(Object.values(e).reduce((t,i)=>{let{isInPrimaryKey:a,name:d}=i;return a&&(t[d]=r[d]??null),t},{}))}function ci(r,e){return r.map(t=>di(t,e))}export{g as a,Fe as b,Ir as c,Br as d,mi as e,Dr as f,o as g,c as h,z as i,v as j,C as k,_ as l,L as m,Ve as n,re as o,k as p,x as q,ke as r,b as s,G as t,u,O as v,Ze as w,Nn as x,p as y,We as z,xb as A,Ob as B,Wb as C,di as D};
//# sourceMappingURL=data:application/json;base64,