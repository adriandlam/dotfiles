import { PGlite } from '@electric-sql/pglite';
import { Q as Query, A as Adapter } from '../../query-BhV8UH4b.js';
import { Executor } from '../index.js';
import 'kysely';

interface PGLiteExecutorOptions {
    /**
     * Delay in milliseconds to add before executing the query.
     * This can be a static number or a function that takes the query as an argument and returns a number.
     *
     * This is useful for simulating network latency or for debugging purposes.
     */
    addDelay?: number | ((query: Query) => number);
    /**
     * Whether to log the query and its parameters.
     *
     * Defaults to `false`.
     */
    logging?: boolean | ((query: Query) => boolean);
}
declare function createPGLiteExecutor(pglite: PGlite, options?: PGLiteExecutorOptions): Executor;
interface PGLiteAdapterOptions extends PGLiteExecutorOptions {
}
declare function createPGLiteAdapter(pglite: PGlite, options?: PGLiteAdapterOptions): Adapter;

export { type PGLiteAdapterOptions, type PGLiteExecutorOptions, createPGLiteAdapter, createPGLiteExecutor };
