import * as ___react___ from 'react';
import * as ___react_dom___ from 'react-dom'; 

function require(mod) {
  if (mod === 'react') return ___react___;
  if (mod === 'react-dom') return ___react_dom___;
  throw new Error(`Unknown module ${mod}`);
}
import{j as m}from"../../chunk-KNBEUPON.js";import"../../chunk-FRW62KTF.js";import{e as d}from"../../chunk-P5LRZ6C2.js";d();function L(o,n){let{addDelay:i=0,logging:a=!1}=n??{};return{execute:async(t,y)=>{let{abortSignal:s}=y||{},c,P=new Promise((e,r)=>c=r);function u(){let e=new Error("This operation was aborted");e.name="AbortError",c(e)}s?.addEventListener("abort",u);let l=typeof i=="function"?i(t):i,p=()=>o.query(t.sql,t.parameters,{rowMode:"object"}),f=l>0?()=>new Promise(e=>setTimeout(e,l)).then(()=>p()):p;try{let e=typeof a=="function"?a(t):a,r;e&&console.log("PGLiteExecutor: Executing query:",r=JSON.stringify(t,null,2));let x=Date.now(),g=await Promise.race([f(),P]),b=Date.now()-x;return e&&console.log("PGLiteExecutor: Query executed in",b,"ms:",r),[null,g.rows]}catch(e){return[e]}finally{s?.removeEventListener("abort",u)}}}}function w(o,n){return m({executor:L(o,n)})}export{w as createPGLiteAdapter,L as createPGLiteExecutor};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vZGF0YS9wZ2xpdGUvaW5kZXgudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB0eXBlIHsgUEdsaXRlIH0gZnJvbSBcIkBlbGVjdHJpYy1zcWwvcGdsaXRlXCI7XG5cbmltcG9ydCB0eXBlIHsgQWRhcHRlciB9IGZyb20gXCIuLi9hZGFwdGVyXCI7XG5pbXBvcnQgdHlwZSB7IEV4ZWN1dG9yIH0gZnJvbSBcIi4uL2V4ZWN1dG9yXCI7XG5pbXBvcnQgeyBjcmVhdGVQb3N0Z3Jlc0FkYXB0ZXIgfSBmcm9tIFwiLi4vcG9zdGdyZXMtY29yZVwiO1xuaW1wb3J0IHsgUXVlcnkgfSBmcm9tIFwiLi4vcXVlcnlcIjtcblxuZXhwb3J0IGludGVyZmFjZSBQR0xpdGVFeGVjdXRvck9wdGlvbnMge1xuICAvKipcbiAgICogRGVsYXkgaW4gbWlsbGlzZWNvbmRzIHRvIGFkZCBiZWZvcmUgZXhlY3V0aW5nIHRoZSBxdWVyeS5cbiAgICogVGhpcyBjYW4gYmUgYSBzdGF0aWMgbnVtYmVyIG9yIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyB0aGUgcXVlcnkgYXMgYW4gYXJndW1lbnQgYW5kIHJldHVybnMgYSBudW1iZXIuXG4gICAqXG4gICAqIFRoaXMgaXMgdXNlZnVsIGZvciBzaW11bGF0aW5nIG5ldHdvcmsgbGF0ZW5jeSBvciBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLlxuICAgKi9cbiAgYWRkRGVsYXk/OiBudW1iZXIgfCAoKHF1ZXJ5OiBRdWVyeSkgPT4gbnVtYmVyKTtcblxuICAvKipcbiAgICogV2hldGhlciB0byBsb2cgdGhlIHF1ZXJ5IGFuZCBpdHMgcGFyYW1ldGVycy5cbiAgICpcbiAgICogRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICovXG4gIGxvZ2dpbmc/OiBib29sZWFuIHwgKChxdWVyeTogUXVlcnkpID0+IGJvb2xlYW4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUEdMaXRlRXhlY3V0b3IocGdsaXRlOiBQR2xpdGUsIG9wdGlvbnM/OiBQR0xpdGVFeGVjdXRvck9wdGlvbnMpOiBFeGVjdXRvciB7XG4gIGNvbnN0IHsgYWRkRGVsYXkgPSAwLCBsb2dnaW5nID0gZmFsc2UgfSA9IG9wdGlvbnMgPz8ge307XG5cbiAgcmV0dXJuIHtcbiAgICBleGVjdXRlOiBhc3luYyAocXVlcnksIG9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IHsgYWJvcnRTaWduYWwgfSA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgIGxldCBhYm9ydDogKHJlYXNvbj86IHVua25vd24pID0+IHZvaWQ7XG4gICAgICBjb25zdCBhYm9ydGlvblByb21pc2UgPSBuZXcgUHJvbWlzZTxuZXZlcj4oKF8sIHJlamVjdCkgPT4gKGFib3J0ID0gcmVqZWN0KSk7XG5cbiAgICAgIGZ1bmN0aW9uIGFib3J0TGlzdGVuZXIoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiVGhpcyBvcGVyYXRpb24gd2FzIGFib3J0ZWRcIik7XG4gICAgICAgIGVycm9yLm5hbWUgPSBcIkFib3J0RXJyb3JcIjtcbiAgICAgICAgYWJvcnQoZXJyb3IpO1xuICAgICAgfVxuXG4gICAgICBhYm9ydFNpZ25hbD8uYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0TGlzdGVuZXIpO1xuXG4gICAgICBjb25zdCBhZGRlZERlbGF5ID0gdHlwZW9mIGFkZERlbGF5ID09PSBcImZ1bmN0aW9uXCIgPyBhZGREZWxheShxdWVyeSkgOiBhZGREZWxheTtcblxuICAgICAgY29uc3QgcXVlcnlQR0xpdGUgPSAoKSA9PiBwZ2xpdGUucXVlcnkocXVlcnkuc3FsLCBxdWVyeS5wYXJhbWV0ZXJzIGFzIG5ldmVyW10sIHsgcm93TW9kZTogXCJvYmplY3RcIiB9KTtcblxuICAgICAgY29uc3QgcXVlcnlQR0xpdGVQb3NzaWJseURlbGF5ZWQgPVxuICAgICAgICBhZGRlZERlbGF5ID4gMFxuICAgICAgICAgID8gKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgYWRkZWREZWxheSkpLnRoZW4oKCkgPT4gcXVlcnlQR0xpdGUoKSlcbiAgICAgICAgICA6IHF1ZXJ5UEdMaXRlO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBzaG91bGRMb2cgPSB0eXBlb2YgbG9nZ2luZyA9PT0gXCJmdW5jdGlvblwiID8gbG9nZ2luZyhxdWVyeSkgOiBsb2dnaW5nO1xuXG4gICAgICAgIGxldCBsb2dnYWJsZVF1ZXJ5OiBzdHJpbmc7XG4gICAgICAgIGlmIChzaG91bGRMb2cpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlBHTGl0ZUV4ZWN1dG9yOiBFeGVjdXRpbmcgcXVlcnk6XCIsIChsb2dnYWJsZVF1ZXJ5ID0gSlNPTi5zdHJpbmdpZnkocXVlcnksIG51bGwsIDIpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBQcm9taXNlLnJhY2UoW3F1ZXJ5UEdMaXRlUG9zc2libHlEZWxheWVkKCksIGFib3J0aW9uUHJvbWlzZV0pO1xuXG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIG5vdztcblxuICAgICAgICBpZiAoc2hvdWxkTG9nKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJQR0xpdGVFeGVjdXRvcjogUXVlcnkgZXhlY3V0ZWQgaW5cIiwgZHVyYXRpb24sIFwibXM6XCIsIGxvZ2dhYmxlUXVlcnkhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbbnVsbCwgcmVzdWx0LnJvd3MgYXMgbmV2ZXJdO1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICAgICAgcmV0dXJuIFtlcnJvciBhcyBFcnJvcl07XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBhYm9ydFNpZ25hbD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0TGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktb2JqZWN0LXR5cGVcbmV4cG9ydCBpbnRlcmZhY2UgUEdMaXRlQWRhcHRlck9wdGlvbnMgZXh0ZW5kcyBQR0xpdGVFeGVjdXRvck9wdGlvbnMge31cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBHTGl0ZUFkYXB0ZXIocGdsaXRlOiBQR2xpdGUsIG9wdGlvbnM/OiBQR0xpdGVBZGFwdGVyT3B0aW9ucyk6IEFkYXB0ZXIge1xuICByZXR1cm4gY3JlYXRlUG9zdGdyZXNBZGFwdGVyKHtcbiAgICBleGVjdXRvcjogY3JlYXRlUEdMaXRlRXhlY3V0b3IocGdsaXRlLCBvcHRpb25zKSxcbiAgfSk7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozt3SEFBQUEsSUF3Qk8sU0FBU0MsRUFBcUJDLEVBQWdCQyxFQUEyQyxDQUM5RixHQUFNLENBQUUsU0FBQUMsRUFBVyxFQUFHLFFBQUFDLEVBQVUsRUFBTSxFQUFJRixHQUFXLENBQUMsRUFFdEQsTUFBTyxDQUNMLFFBQVMsTUFBT0csRUFBT0gsSUFBWSxDQUNqQyxHQUFNLENBQUUsWUFBQUksQ0FBWSxFQUFJSixHQUFXLENBQUMsRUFFaENLLEVBQ0VDLEVBQWtCLElBQUksUUFBZSxDQUFDQyxFQUFHQyxJQUFZSCxFQUFRRyxDQUFPLEVBRTFFLFNBQVNDLEdBQXNCLENBQzdCLElBQU1DLEVBQVEsSUFBSSxNQUFNLDRCQUE0QixFQUNwREEsRUFBTSxLQUFPLGFBQ2JMLEVBQU1LLENBQUssQ0FDYixDQUVBTixHQUFhLGlCQUFpQixRQUFTSyxDQUFhLEVBRXBELElBQU1FLEVBQWEsT0FBT1YsR0FBYSxXQUFhQSxFQUFTRSxDQUFLLEVBQUlGLEVBRWhFVyxFQUFjLElBQU1iLEVBQU8sTUFBTUksRUFBTSxJQUFLQSxFQUFNLFdBQXVCLENBQUUsUUFBUyxRQUFTLENBQUMsRUFFOUZVLEVBQ0pGLEVBQWEsRUFDVCxJQUFNLElBQUksUUFBU0csR0FBWSxXQUFXQSxFQUFTSCxDQUFVLENBQUMsRUFBRSxLQUFLLElBQU1DLEVBQVksQ0FBQyxFQUN4RkEsRUFFTixHQUFJLENBQ0YsSUFBTUcsRUFBWSxPQUFPYixHQUFZLFdBQWFBLEVBQVFDLENBQUssRUFBSUQsRUFFL0RjLEVBQ0FELEdBQ0YsUUFBUSxJQUFJLG1DQUFxQ0MsRUFBZ0IsS0FBSyxVQUFVYixFQUFPLEtBQU0sQ0FBQyxDQUFFLEVBRWxHLElBQU1jLEVBQU0sS0FBSyxJQUFJLEVBRWZDLEVBQVMsTUFBTSxRQUFRLEtBQUssQ0FBQ0wsRUFBMkIsRUFBR1AsQ0FBZSxDQUFDLEVBRTNFYSxFQUFXLEtBQUssSUFBSSxFQUFJRixFQUU5QixPQUFJRixHQUNGLFFBQVEsSUFBSSxvQ0FBcUNJLEVBQVUsTUFBT0gsQ0FBYyxFQUczRSxDQUFDLEtBQU1FLEVBQU8sSUFBYSxDQUNwQyxPQUFTUixFQUFnQixDQUN2QixNQUFPLENBQUNBLENBQWMsQ0FDeEIsUUFBRSxDQUNBTixHQUFhLG9CQUFvQixRQUFTSyxDQUFhLENBQ3pELENBQ0YsQ0FDRixDQUNGLENBS08sU0FBU1csRUFBb0JyQixFQUFnQkMsRUFBeUMsQ0FDM0YsT0FBT3FCLEVBQXNCLENBQzNCLFNBQVV2QixFQUFxQkMsRUFBUUMsQ0FBTyxDQUNoRCxDQUFDLENBQ0giLAogICJuYW1lcyI6IFsiaW5pdF9kZWZpbmVfQUNDRUxFUkFURV9TQ0hFTUFfQllfUFJPVklERVIiLCAiY3JlYXRlUEdMaXRlRXhlY3V0b3IiLCAicGdsaXRlIiwgIm9wdGlvbnMiLCAiYWRkRGVsYXkiLCAibG9nZ2luZyIsICJxdWVyeSIsICJhYm9ydFNpZ25hbCIsICJhYm9ydCIsICJhYm9ydGlvblByb21pc2UiLCAiXyIsICJyZWplY3QiLCAiYWJvcnRMaXN0ZW5lciIsICJlcnJvciIsICJhZGRlZERlbGF5IiwgInF1ZXJ5UEdMaXRlIiwgInF1ZXJ5UEdMaXRlUG9zc2libHlEZWxheWVkIiwgInJlc29sdmUiLCAic2hvdWxkTG9nIiwgImxvZ2dhYmxlUXVlcnkiLCAibm93IiwgInJlc3VsdCIsICJkdXJhdGlvbiIsICJjcmVhdGVQR0xpdGVBZGFwdGVyIiwgImNyZWF0ZVBvc3RncmVzQWRhcHRlciJdCn0K