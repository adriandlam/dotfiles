"use strict";var a=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var E=Object.prototype.hasOwnProperty;var x=(e,r)=>{for(var t in r)a(e,t,{get:r[t],enumerable:!0})},F=(e,r,t,o)=>{if(r&&typeof r=="object"||typeof r=="function")for(let n of f(r))!E.call(e,n)&&n!==t&&a(e,n,{get:()=>r[n],enumerable:!(o=y(r,n))||o.enumerable});return e};var w=e=>F(a({},"__esModule",{value:!0}),e);var Q={};x(Q,{createStudioBFFClient:()=>h,deserializeError:()=>c,serializeError:()=>m});module.exports=w(Q);function h(e){let{customHeaders:r,customPayload:t,resultDeserializerFn:o,url:n}=e,i=e.fetch||fetch;return{async execute(p,g){try{let s=await i(n,{body:JSON.stringify({customPayload:t,procedure:"query",query:p}),headers:{Accept:"application/json","Content-Type":"application/json",...r},method:"POST",signal:g?.abortSignal});if(!s.ok){let u;try{u=await s.text()}catch{u="unknown error"}return[new Error(u)]}let[l,d]=await s.json();return l?[c(l)]:[null,o?.(d)||d]}catch(s){return[s]}}}}function m(e){if(e instanceof AggregateError){let{name:r,message:t}=e,o=e.errors.map(m);return{name:r,message:t,errors:o}}if(e instanceof Error){let{name:r,message:t}=e;return{name:r,message:t}}return{name:"UnknownError",message:JSON.stringify(e)}}function c(e){let{name:r,message:t}=e;if(e.errors!==void 0){let n=e.errors.map(c),i=new AggregateError(n,t);return i.name=e.name,i}let o=new Error(e.message);return e.name=r,o}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vZGF0YS9iZmYvaW5kZXgudHMiLCAiLi4vLi4vLi4vZGF0YS9iZmYvYmZmLWNsaWVudC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0ICogZnJvbSBcIi4vYmZmLWNsaWVudFwiO1xuIiwgImltcG9ydCB0eXBlIHsgRXhlY3V0ZU9wdGlvbnMsIEV4ZWN1dG9yIH0gZnJvbSBcIi4uL2V4ZWN1dG9yXCI7XG5pbXBvcnQgdHlwZSB7IFF1ZXJ5LCBRdWVyeVJlc3VsdCB9IGZyb20gXCIuLi9xdWVyeVwiO1xuaW1wb3J0IHR5cGUgeyBFaXRoZXIgfSBmcm9tIFwiLi4vdHlwZS11dGlsc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0dWRpb0JGRkNsaWVudFByb3BzIHtcbiAgLyoqXG4gICAqIEFsbG93cyBwYXNzaW5nIGN1c3RvbSBoZWFkZXJzIHRvIHRoZSBCRkYuXG4gICAqXG4gICAqIGUuZy4gYXV0aG9yaXphdGlvbiB0b2tlbi5cbiAgICovXG4gIGN1c3RvbUhlYWRlcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBBbGxvd3MgcGFzc2luZyBjdXN0b20gcGF5bG9hZCB0byB0aGUgQkZGIHZpYSBgYm9keS5jdXN0b21QYXlsb2FkYC5cbiAgICpcbiAgICogZS5nLiB0ZW5hbnQgaWQuXG4gICAqL1xuICBjdXN0b21QYXlsb2FkPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG5cbiAgLyoqXG4gICAqIEFsbG93cyBvdmVycmlkaW5nIHRoZSBmZXRjaCBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogZS5nLiBmb3IgdGVzdGluZywgb3Igb2xkZXIgTm9kZS5qcyB2ZXJzaW9ucy5cbiAgICovXG4gIGZldGNoPzogdHlwZW9mIGdsb2JhbFRoaXMuZmV0Y2g7XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHVzZWQgdG8gZGVzZXJpYWxpemUgdGhlIHJlc3VsdHMgb2YgcXVlcmllcy5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhlIHJlc3VsdHMgYXJlIHJldHVybmVkIGFzIGlzIHdpdGhvdXQgYW55IGFkZGl0aW9uYWwgcHJvY2Vzc2luZy5cbiAgICovXG4gIHJlc3VsdERlc2VyaWFsaXplckZuPyh0aGlzOiB2b2lkLCByZXN1bHRzOiB1bmtub3duKTogdW5rbm93bltdO1xuXG4gIC8qKlxuICAgKiBCRkYgZW5kcG9pbnQgVVJMLlxuICAgKlxuICAgKiBlLmcuIGBodHRwczovL2FwaS5leGFtcGxlLmNvbS9zdHVkaW9gXG4gICAqL1xuICB1cmw6IHN0cmluZyB8IFVSTDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdHVkaW9CRkZDbGllbnQgZXh0ZW5kcyBFeGVjdXRvciB7XG4gIC8qKlxuICAgKiBSZXF1ZXN0cyBCRkYgdG8gcXVlcnkgdGhlIGRhdGFiYXNlLlxuICAgKlxuICAgKiBUaGUgcXVlcnkgaXMgc2VudCBhcyBgYm9keS5xdWVyeWAuXG4gICAqL1xuICBleGVjdXRlPFEgZXh0ZW5kcyBRdWVyeT4odGhpczogdm9pZCwgcXVlcnk6IFEsIG9wdGlvbnM/OiBFeGVjdXRlT3B0aW9ucyk6IFByb21pc2U8RWl0aGVyPEVycm9yLCBRdWVyeVJlc3VsdDxRPj4+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0dWRpb0JGRlF1ZXJ5UmVxdWVzdCB7XG4gIGN1c3RvbVBheWxvYWQ/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgcHJvY2VkdXJlOiBcInF1ZXJ5XCI7XG4gIHF1ZXJ5OiBRdWVyeTx1bmtub3duPjtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgU3R1ZGlvIEJGRiBjbGllbnQuIEJGRiBzdGFuZHMgZm9yIFwiQmFja2VuZCBGb3IgRnJvbnRlbmRcIiBidHcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdHVkaW9CRkZDbGllbnQocHJvcHM6IFN0dWRpb0JGRkNsaWVudFByb3BzKTogU3R1ZGlvQkZGQ2xpZW50IHtcbiAgY29uc3QgeyBjdXN0b21IZWFkZXJzLCBjdXN0b21QYXlsb2FkLCByZXN1bHREZXNlcmlhbGl6ZXJGbiwgdXJsIH0gPSBwcm9wcztcbiAgY29uc3QgZmV0Y2hGbiA9IHByb3BzLmZldGNoIHx8IGZldGNoO1xuXG4gIHJldHVybiB7XG4gICAgYXN5bmMgZXhlY3V0ZTxRIGV4dGVuZHMgUXVlcnk+KHF1ZXJ5OiBRLCBvcHRpb25zPzogRXhlY3V0ZU9wdGlvbnMpOiBQcm9taXNlPEVpdGhlcjxFcnJvciwgUXVlcnlSZXN1bHQ8UT4+PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoRm4odXJsLCB7XG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBjdXN0b21QYXlsb2FkLCBwcm9jZWR1cmU6IFwicXVlcnlcIiwgcXVlcnkgfSBzYXRpc2ZpZXMgU3R1ZGlvQkZGUXVlcnlSZXF1ZXN0KSxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAuLi5jdXN0b21IZWFkZXJzLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICBzaWduYWw6IG9wdGlvbnM/LmFib3J0U2lnbmFsLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgbGV0IGVycm9yVGV4dDogc3RyaW5nO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGVycm9yVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIGVycm9yVGV4dCA9IFwidW5rbm93biBlcnJvclwiO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBbbmV3IEVycm9yKGVycm9yVGV4dCldO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgW2Vycm9yLCByZXN1bHRzXSA9IChhd2FpdCByZXNwb25zZS5qc29uKCkpIGFzIFtTZXJpYWxpemVkRXJyb3IsIHVua25vd25dO1xuXG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBbZGVzZXJpYWxpemVFcnJvcihlcnJvcildO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtudWxsLCAocmVzdWx0RGVzZXJpYWxpemVyRm4/LihyZXN1bHRzKSB8fCByZXN1bHRzKSBhcyBuZXZlcl07XG4gICAgICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgICAgICAvLyBUT0RPOiBoYW5kbGUgcHJvcGVybHlcbiAgICAgICAgcmV0dXJuIFtlcnJvciBhcyBFcnJvcl07XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cblxuaW50ZXJmYWNlIFNlcmlhbGl6ZWRFcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBlcnJvcnM/OiBTZXJpYWxpemVkRXJyb3JbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZUVycm9yKGVycm9yOiB1bmtub3duKTogU2VyaWFsaXplZEVycm9yIHtcbiAgaWYgKGVycm9yIGluc3RhbmNlb2YgQWdncmVnYXRlRXJyb3IpIHtcbiAgICBjb25zdCB7IG5hbWUsIG1lc3NhZ2UgfSA9IGVycm9yO1xuICAgIGNvbnN0IGVycm9ycyA9IGVycm9yLmVycm9ycy5tYXAoc2VyaWFsaXplRXJyb3IpO1xuICAgIHJldHVybiB7IG5hbWUsIG1lc3NhZ2UsIGVycm9ycyB9O1xuICB9XG5cbiAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBjb25zdCB7IG5hbWUsIG1lc3NhZ2UgfSA9IGVycm9yO1xuICAgIHJldHVybiB7IG5hbWUsIG1lc3NhZ2UgfTtcbiAgfVxuXG4gIHJldHVybiB7IG5hbWU6IGBVbmtub3duRXJyb3JgLCBtZXNzYWdlOiBKU09OLnN0cmluZ2lmeShlcnJvcikgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlc2VyaWFsaXplRXJyb3IoZXJyb3I6IFNlcmlhbGl6ZWRFcnJvcik6IEVycm9yIHtcbiAgY29uc3QgeyBuYW1lLCBtZXNzYWdlIH0gPSBlcnJvcjtcblxuICBpZiAoZXJyb3IuZXJyb3JzICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBlcnJvcnMgPSBlcnJvci5lcnJvcnMubWFwKGRlc2VyaWFsaXplRXJyb3IpO1xuICAgIGNvbnN0IGFnZ3JlZ2F0ZUVycm9yID0gbmV3IEFnZ3JlZ2F0ZUVycm9yKGVycm9ycywgbWVzc2FnZSk7XG4gICAgYWdncmVnYXRlRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG4gICAgcmV0dXJuIGFnZ3JlZ2F0ZUVycm9yO1xuICB9XG5cbiAgY29uc3QgcmVndWxhckVycm9yID0gbmV3IEVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICBlcnJvci5uYW1lID0gbmFtZTtcbiAgcmV0dXJuIHJlZ3VsYXJFcnJvcjtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICJ5YUFBQSxJQUFBQSxFQUFBLEdBQUFDLEVBQUFELEVBQUEsMkJBQUFFLEVBQUEscUJBQUFDLEVBQUEsbUJBQUFDLElBQUEsZUFBQUMsRUFBQUwsR0MyRE8sU0FBU00sRUFBc0JDLEVBQThDLENBQ2xGLEdBQU0sQ0FBRSxjQUFBQyxFQUFlLGNBQUFDLEVBQWUscUJBQUFDLEVBQXNCLElBQUFDLENBQUksRUFBSUosRUFDOURLLEVBQVVMLEVBQU0sT0FBUyxNQUUvQixNQUFPLENBQ0wsTUFBTSxRQUF5Qk0sRUFBVUMsRUFBa0UsQ0FDekcsR0FBSSxDQUNGLElBQU1DLEVBQVcsTUFBTUgsRUFBUUQsRUFBSyxDQUNsQyxLQUFNLEtBQUssVUFBVSxDQUFFLGNBQUFGLEVBQWUsVUFBVyxRQUFTLE1BQUFJLENBQU0sQ0FBaUMsRUFDakcsUUFBUyxDQUNQLE9BQVEsbUJBQ1IsZUFBZ0IsbUJBQ2hCLEdBQUdMLENBQ0wsRUFDQSxPQUFRLE9BQ1IsT0FBUU0sR0FBUyxXQUNuQixDQUFDLEVBRUQsR0FBSSxDQUFDQyxFQUFTLEdBQUksQ0FDaEIsSUFBSUMsRUFFSixHQUFJLENBQ0ZBLEVBQVksTUFBTUQsRUFBUyxLQUFLLENBQ2xDLE1BQVEsQ0FDTkMsRUFBWSxlQUNkLENBRUEsTUFBTyxDQUFDLElBQUksTUFBTUEsQ0FBUyxDQUFDLENBQzlCLENBRUEsR0FBTSxDQUFDQyxFQUFPQyxDQUFPLEVBQUssTUFBTUgsRUFBUyxLQUFLLEVBRTlDLE9BQUlFLEVBQ0ssQ0FBQ0UsRUFBaUJGLENBQUssQ0FBQyxFQUcxQixDQUFDLEtBQU9QLElBQXVCUSxDQUFPLEdBQUtBLENBQWlCLENBQ3JFLE9BQVNELEVBQWdCLENBRXZCLE1BQU8sQ0FBQ0EsQ0FBYyxDQUN4QixDQUNGLENBQ0YsQ0FDRixDQVFPLFNBQVNHLEVBQWVILEVBQWlDLENBQzlELEdBQUlBLGFBQWlCLGVBQWdCLENBQ25DLEdBQU0sQ0FBRSxLQUFBSSxFQUFNLFFBQUFDLENBQVEsRUFBSUwsRUFDcEJNLEVBQVNOLEVBQU0sT0FBTyxJQUFJRyxDQUFjLEVBQzlDLE1BQU8sQ0FBRSxLQUFBQyxFQUFNLFFBQUFDLEVBQVMsT0FBQUMsQ0FBTyxDQUNqQyxDQUVBLEdBQUlOLGFBQWlCLE1BQU8sQ0FDMUIsR0FBTSxDQUFFLEtBQUFJLEVBQU0sUUFBQUMsQ0FBUSxFQUFJTCxFQUMxQixNQUFPLENBQUUsS0FBQUksRUFBTSxRQUFBQyxDQUFRLENBQ3pCLENBRUEsTUFBTyxDQUFFLEtBQU0sZUFBZ0IsUUFBUyxLQUFLLFVBQVVMLENBQUssQ0FBRSxDQUNoRSxDQUVPLFNBQVNFLEVBQWlCRixFQUErQixDQUM5RCxHQUFNLENBQUUsS0FBQUksRUFBTSxRQUFBQyxDQUFRLEVBQUlMLEVBRTFCLEdBQUlBLEVBQU0sU0FBVyxPQUFXLENBQzlCLElBQU1NLEVBQVNOLEVBQU0sT0FBTyxJQUFJRSxDQUFnQixFQUMxQ0ssRUFBaUIsSUFBSSxlQUFlRCxFQUFRRCxDQUFPLEVBQ3pELE9BQUFFLEVBQWUsS0FBT1AsRUFBTSxLQUNyQk8sQ0FDVCxDQUVBLElBQU1DLEVBQWUsSUFBSSxNQUFNUixFQUFNLE9BQU8sRUFDNUMsT0FBQUEsRUFBTSxLQUFPSSxFQUNOSSxDQUNUIiwKICAibmFtZXMiOiBbImJmZl9leHBvcnRzIiwgIl9fZXhwb3J0IiwgImNyZWF0ZVN0dWRpb0JGRkNsaWVudCIsICJkZXNlcmlhbGl6ZUVycm9yIiwgInNlcmlhbGl6ZUVycm9yIiwgIl9fdG9Db21tb25KUyIsICJjcmVhdGVTdHVkaW9CRkZDbGllbnQiLCAicHJvcHMiLCAiY3VzdG9tSGVhZGVycyIsICJjdXN0b21QYXlsb2FkIiwgInJlc3VsdERlc2VyaWFsaXplckZuIiwgInVybCIsICJmZXRjaEZuIiwgInF1ZXJ5IiwgIm9wdGlvbnMiLCAicmVzcG9uc2UiLCAiZXJyb3JUZXh0IiwgImVycm9yIiwgInJlc3VsdHMiLCAiZGVzZXJpYWxpemVFcnJvciIsICJzZXJpYWxpemVFcnJvciIsICJuYW1lIiwgIm1lc3NhZ2UiLCAiZXJyb3JzIiwgImFnZ3JlZ2F0ZUVycm9yIiwgInJlZ3VsYXJFcnJvciJdCn0K