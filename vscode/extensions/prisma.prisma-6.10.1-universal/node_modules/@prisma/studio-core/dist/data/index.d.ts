import { Q as Query, E as Either, a as QueryResult } from '../query-BhV8UH4b.js';
export { A as Adapter, h as AdapterBaseOptions, e as AdapterDeleteDetails, n as AdapterDeleteOptions, x as AdapterDeleteResult, f as AdapterError, b as AdapterInsertDetails, l as AdapterInsertOptions, v as AdapterInsertResult, j as AdapterIntrospectOptions, o as AdapterIntrospectResult, c as AdapterQueryDetails, k as AdapterQueryOptions, u as AdapterQueryResult, d as AdapterUpdateDetails, m as AdapterUpdateOptions, w as AdapterUpdateResult, z as BigIntString, C as Column, q as ColumnFilter, D as DataType, p as DataTypeGroup, r as FilterGroup, F as FilterOperator, N as NumericString, S as Schema, t as SortDirection, s as SortOrderItem, T as Table, g as applyInferredRowFilters, y as createAdapterError, i as inferRowFilter } from '../query-BhV8UH4b.js';
import 'kysely';

interface Executor {
    execute<Q extends Query>(query: Q, options?: ExecuteOptions): Promise<Either<Error, QueryResult<Q>>>;
}
interface ExecuteOptions {
    abortSignal?: AbortSignal;
}

export { Either, type ExecuteOptions, type Executor, Query, QueryResult };
