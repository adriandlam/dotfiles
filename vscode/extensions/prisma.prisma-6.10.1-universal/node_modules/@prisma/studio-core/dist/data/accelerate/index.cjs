"use strict";var R=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var P=Object.prototype.hasOwnProperty;var S=(e,t)=>{for(var r in t)R(e,r,{get:t[r],enumerable:!0})},C=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of x(t))!P.call(e,o)&&o!==r&&R(e,o,{get:()=>t[o],enumerable:!(n=A(t,o))||n.enumerable});return e};var q=e=>C(R({},"__esModule",{value:!0}),e);var k={};S(k,{createAccelerateHttpClient:()=>E,deserializeRawResult:()=>y});module.exports=q(k);var p={postgres:{encoded:"ZGF0YXNvdXJjZSBkYiB7CiAgICBwcm92aWRlciA9ICJwb3N0Z3JlcyIKICAgIHVybCAgICAgID0gZW52KCJEQVRBQkFTRV9VUkwiKQp9CiAgICAKZ2VuZXJhdG9yIGNsaWVudCB7CiAgICBwcm92aWRlciA9ICJwcmlzbWEtY2xpZW50LWpzIgp9",hash:"54195896aeafa3318ca33f5a8bb44c6b4d89c368cb15288f3bd5ace35a3f9227"}};function y(e,t=T){let{columns:r,rows:n,types:o}=e,a=[],c=H(r);for(let s=0,d=n.length;s<d;s++){let l=n[s],i={...c};for(let u=0,w=l.length;u<w;u++){let m=r[u];i[m]=t(l[u],o[u],m)}a.push(i)}return a}function T(e,t,r){return e}function H(e){let t={};for(let r=0,n=e.length;r<n;r++)t[e[r]]=null;return t}var Q=["postgres"],g="accelerate.prisma-data.net",h=p;function E(e){let{provider:t}=e;if(t!=="postgresql"&&!Q.includes(t))throw new Error(`Invalid provider: ${t}`);let r=O(e);return{execute:D(e,r)}}function O(e){let{host:t,engineHash:r,clientVersion:n,provider:o,apiKey:a}=e,s=`${t===g?"https":"http"}://${t||g}/${n}/${f(o).hash}`,d=e.fetch||fetch,l={Authorization:`Bearer ${a}`,"Prisma-Engine-Hash":r};return i=>d(`${s}/${i.path}`,{body:i.body,headers:l,method:i.method,signal:i.signal})}async function _(e,t,r){let n=await r({body:f(e.provider).encoded,method:"PUT",path:"schema",signal:t?.abortSignal});if(!n.ok){try{console.error(await n.text())}catch{}throw new Error(`Failed to upload schema to query engine: ${n.statusText}`)}}function f(e){return e==="postgresql"?h.postgres:h[e]}async function v(e,t,r){let n=await r({body:JSON.stringify(e),method:"POST",path:"graphql",signal:t?.abortSignal});if(!n.ok){try{console.error(await n.text())}catch{}throw new Error(`Failed to execute query: ${n.statusText}`)}return await n.json()}function D(e,t){let{resultDeserializerFn:r=y}=e,n=null;return async(o,a)=>{try{await(n||=_(e,a,t));let{data:c,errors:s}=await v({action:"queryRaw",query:{arguments:{parameters:o.parameters,query:o.sql},selection:{}}},a,t);return s?[new AggregateError(s,"Errors occurred while executing the query")]:[null,r(c.queryRaw)]}catch(c){return[c]}}}
//# sourceMappingURL=data:application/json;base64,