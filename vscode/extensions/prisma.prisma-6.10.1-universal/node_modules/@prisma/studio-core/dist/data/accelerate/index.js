import * as ___react___ from 'react';
import * as ___react_dom___ from 'react-dom'; 

function require(mod) {
  if (mod === 'react') return ___react___;
  if (mod === 'react-dom') return ___react_dom___;
  throw new Error(`Unknown module ${mod}`);
}
import{e as u,f as y}from"../../chunk-P5LRZ6C2.js";u();u();function R(e,t=w){let{columns:r,rows:n,types:i}=e,s=[],c=A(r);for(let o=0,d=n.length;o<d;o++){let p=n[o],a={...c};for(let l=0,f=p.length;l<f;l++){let m=r[l];a[m]=t(p[l],i[l],m)}s.push(a)}return s}function w(e,t,r){return e}function A(e){let t={};for(let r=0,n=e.length;r<n;r++)t[e[r]]=null;return t}u();var x=["postgres"],g="accelerate.prisma-data.net",h=y;function P(e){let{provider:t}=e;if(t!=="postgresql"&&!x.includes(t))throw new Error(`Invalid provider: ${t}`);let r=S(e);return{execute:b(e,r)}}function S(e){let{host:t,engineHash:r,clientVersion:n,provider:i,apiKey:s}=e,o=`${t===g?"https":"http"}://${t||g}/${n}/${E(i).hash}`,d=e.fetch||fetch,p={Authorization:`Bearer ${s}`,"Prisma-Engine-Hash":r};return a=>d(`${o}/${a.path}`,{body:a.body,headers:p,method:a.method,signal:a.signal})}async function C(e,t,r){let n=await r({body:E(e.provider).encoded,method:"PUT",path:"schema",signal:t?.abortSignal});if(!n.ok){try{console.error(await n.text())}catch{}throw new Error(`Failed to upload schema to query engine: ${n.statusText}`)}}function E(e){return e==="postgresql"?h.postgres:h[e]}async function q(e,t,r){let n=await r({body:JSON.stringify(e),method:"POST",path:"graphql",signal:t?.abortSignal});if(!n.ok){try{console.error(await n.text())}catch{}throw new Error(`Failed to execute query: ${n.statusText}`)}return await n.json()}function b(e,t){let{resultDeserializerFn:r=R}=e,n=null;return async(i,s)=>{try{await(n||=C(e,s,t));let{data:c,errors:o}=await q({action:"queryRaw",query:{arguments:{parameters:i.parameters,query:i.sql},selection:{}}},s,t);return o?[new AggregateError(o,"Errors occurred while executing the query")]:[null,r(c.queryRaw)]}catch(c){return[c]}}}export{P as createAccelerateHttpClient,R as deserializeRawResult};
//# sourceMappingURL=data:application/json;base64,