{"version":3,"sources":["../../src/scripts/server.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { PGlite, DebugLevel } from '@electric-sql/pglite'\nimport { PGLiteSocketServer } from '../index'\nimport { parseArgs } from 'node:util'\n\n// Define command line argument options\nconst args = parseArgs({\n  options: {\n    db: {\n      type: 'string',\n      short: 'd',\n      default: 'memory://',\n      help: 'Database path (relative or absolute). Use memory:// for in-memory database.',\n    },\n    port: {\n      type: 'string',\n      short: 'p',\n      default: '5432',\n      help: 'Port to listen on',\n    },\n    host: {\n      type: 'string',\n      short: 'h',\n      default: '127.0.0.1',\n      help: 'Host to bind to',\n    },\n    path: {\n      type: 'string',\n      short: 'u',\n      default: undefined,\n      help: 'unix socket to bind to. Takes precedence over host:port',\n    },\n    debug: {\n      type: 'string',\n      short: 'v',\n      default: '0',\n      help: 'Debug level (0-5)',\n    },\n    help: {\n      type: 'boolean',\n      short: '?',\n      default: false,\n      help: 'Show help',\n    },\n  },\n})\n\nconst help = `PGlite Socket Server\nUsage: pglite-server [options]\n\nOptions:\n  -d, --db=PATH       Database path (default: memory://)\n  -p, --port=PORT     Port to listen on (default: 5432)\n  -h, --host=HOST     Host to bind to (default: 127.0.0.1)\n  -u, --path=UNIX     Unix socket to bind to (default: undefined). Takes precedence over host:port\n  -v, --debug=LEVEL   Debug level 0-5 (default: 0)\n`\n\n// Show help and exit if requested\nif (args.values.help) {\n  console.log(help)\n  process.exit(0)\n}\n\n// Main function to start the server\nasync function main() {\n  try {\n    // Parse arguments\n    const dbPath = args.values.db as string\n    const port = parseInt(args.values.port as string, 10)\n    const host = args.values.host as string\n    const path = args.values.path as string\n    const debugStr = args.values.debug as string\n    const debugLevel = parseInt(debugStr, 10) as DebugLevel\n\n    console.log(`Initializing PGLite with database: ${dbPath}`)\n    console.log(`Debug level: ${debugLevel}`)\n\n    // Create PGlite instance\n    const db = new PGlite(dbPath, { debug: debugLevel })\n\n    // Wait for PGlite to be ready\n    await db.waitReady\n    console.log('PGlite database initialized')\n\n    // Create and start the socket server\n    const server = new PGLiteSocketServer({\n      db,\n      port,\n      host,\n      path,\n      inspect: debugLevel > 0,\n    })\n\n    // Listen for server events\n    server.addEventListener('listening', (event) => {\n      const detail = (\n        event as CustomEvent<{ port: number; host: string } | { host: string }>\n      ).detail\n      console.log(`PGLiteSocketServer listening on ${JSON.stringify(detail)}`)\n    })\n\n    server.addEventListener('connection', (event) => {\n      const { clientAddress, clientPort } = (\n        event as CustomEvent<{ clientAddress: string; clientPort: number }>\n      ).detail\n      console.log(`Client connected from ${clientAddress}:${clientPort}`)\n    })\n\n    server.addEventListener('error', (event) => {\n      const error = (event as CustomEvent<Error>).detail\n      console.error('Socket server error:', error)\n    })\n\n    // Start the server\n    await server.start()\n\n    // Handle process termination to stop the server gracefully\n    const shutdown = async () => {\n      console.log('\\nShutting down PGLiteSocketServer...')\n      await server.stop()\n      await db.close()\n      console.log('Server stopped')\n      process.exit(0)\n    }\n\n    process.on('SIGINT', shutdown)\n    process.on('SIGTERM', shutdown)\n  } catch (error) {\n    console.error('Failed to start PGLiteSocketServer:', error)\n    process.exit(1)\n  }\n}\n\n// Run the main function\nmain().catch((error) => {\n  console.error('Unhandled error:', error)\n  process.exit(1)\n})\n"],"mappings":";yCAEA,OAAS,UAAAA,MAA0B,uBAEnC,OAAS,aAAAC,MAAiB,YAG1B,IAAMC,EAAOD,EAAU,CACrB,QAAS,CACP,GAAI,CACF,KAAM,SACN,MAAO,IACP,QAAS,YACT,KAAM,6EACR,EACA,KAAM,CACJ,KAAM,SACN,MAAO,IACP,QAAS,OACT,KAAM,mBACR,EACA,KAAM,CACJ,KAAM,SACN,MAAO,IACP,QAAS,YACT,KAAM,iBACR,EACA,KAAM,CACJ,KAAM,SACN,MAAO,IACP,QAAS,OACT,KAAM,yDACR,EACA,MAAO,CACL,KAAM,SACN,MAAO,IACP,QAAS,IACT,KAAM,mBACR,EACA,KAAM,CACJ,KAAM,UACN,MAAO,IACP,QAAS,GACT,KAAM,WACR,CACF,CACF,CAAC,EAEKE,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYTD,EAAK,OAAO,OACd,QAAQ,IAAIC,CAAI,EAChB,QAAQ,KAAK,CAAC,GAIhB,eAAeC,GAAO,CACpB,GAAI,CAEF,IAAMC,EAASH,EAAK,OAAO,GACrBI,EAAO,SAASJ,EAAK,OAAO,KAAgB,EAAE,EAC9CK,EAAOL,EAAK,OAAO,KACnBM,EAAON,EAAK,OAAO,KACnBO,EAAWP,EAAK,OAAO,MACvBQ,EAAa,SAASD,EAAU,EAAE,EAExC,QAAQ,IAAI,sCAAsCJ,CAAM,EAAE,EAC1D,QAAQ,IAAI,gBAAgBK,CAAU,EAAE,EAGxC,IAAMC,EAAK,IAAIC,EAAOP,EAAQ,CAAE,MAAOK,CAAW,CAAC,EAGnD,MAAMC,EAAG,UACT,QAAQ,IAAI,6BAA6B,EAGzC,IAAME,EAAS,IAAIC,EAAmB,CACpC,GAAAH,EACA,KAAAL,EACA,KAAAC,EACA,KAAAC,EACA,QAASE,EAAa,CACxB,CAAC,EAGDG,EAAO,iBAAiB,YAAcE,GAAU,CAC9C,IAAMC,EACJD,EACA,OACF,QAAQ,IAAI,mCAAmC,KAAK,UAAUC,CAAM,CAAC,EAAE,CACzE,CAAC,EAEDH,EAAO,iBAAiB,aAAeE,GAAU,CAC/C,GAAM,CAAE,cAAAE,EAAe,WAAAC,CAAW,EAChCH,EACA,OACF,QAAQ,IAAI,yBAAyBE,CAAa,IAAIC,CAAU,EAAE,CACpE,CAAC,EAEDL,EAAO,iBAAiB,QAAUE,GAAU,CAC1C,IAAMI,EAASJ,EAA6B,OAC5C,QAAQ,MAAM,uBAAwBI,CAAK,CAC7C,CAAC,EAGD,MAAMN,EAAO,MAAM,EAGnB,IAAMO,EAAW,SAAY,CAC3B,QAAQ,IAAI;AAAA,oCAAuC,EACnD,MAAMP,EAAO,KAAK,EAClB,MAAMF,EAAG,MAAM,EACf,QAAQ,IAAI,gBAAgB,EAC5B,QAAQ,KAAK,CAAC,CAChB,EAEA,QAAQ,GAAG,SAAUS,CAAQ,EAC7B,QAAQ,GAAG,UAAWA,CAAQ,CAChC,OAASD,EAAO,CACd,QAAQ,MAAM,sCAAuCA,CAAK,EAC1D,QAAQ,KAAK,CAAC,CAChB,CACF,CAGAf,EAAK,EAAE,MAAOe,GAAU,CACtB,QAAQ,MAAM,mBAAoBA,CAAK,EACvC,QAAQ,KAAK,CAAC,CAChB,CAAC","names":["PGlite","parseArgs","args","help","main","dbPath","port","host","path","debugStr","debugLevel","db","PGlite","server","PGLiteSocketServer","event","detail","clientAddress","clientPort","error","shutdown"]}